import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as a,d as s,e as l,g as e,l as t,r as k,o as r}from"./app-B5S879k5.js";const d="/blog_technical/assets/5e8d10b5758685850aeed2a473a6cdc2-Bv-d5Bqd.png",o="/blog_technical/assets/dd65b95de96d78552a92757d58de6a37-DzOtQJcx.png",c="/blog_technical/assets/81b9609c5f50281ec3d53fb4d299b690-DXhA2O45.png",g="/blog_technical/assets/4d210fa1adccb7299d632ed7e66391e8-CH61ySo4.png",y={};function A(B,i){const n=k("RouteLink");return r(),p("div",null,[i[12]||(i[12]=a("h1",{id:"_08-冷链周转-http-的缓存代理",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_08-冷链周转-http-的缓存代理"},[a("span",null,"08 | 冷链周转：HTTP 的缓存代理")])],-1)),a("p",null,[i[2]||(i[2]=s("前面讲解了 ")),l(n,{to:"/http-protocol/04/06.html"},{default:e(()=>i[0]||(i[0]=[s("HTTP 的缓存控制")])),_:1}),i[3]||(i[3]=s(" 和 ")),l(n,{to:"/http-protocol/04/07.html"},{default:e(()=>i[1]||(i[1]=[s("HTTP 的代理服务")])),_:1}),i[4]||(i[4]=s("。那么，把这两者结合起来就是这节课所要说的 ")),i[5]||(i[5]=a("strong",null,"缓存代理",-1)),i[6]||(i[6]=s("，也就是支持缓存控制的代理服务。"))]),i[13]||(i[13]=t('<p>之前谈到缓存时，主要讲了客户端（浏览器）上的缓存控制，<strong>它能够减少响应时间、节约带宽，提升客户端的用户体验</strong> 。</p><p>但 HTTP 传输链路上，不只是客户端有缓存，服务器上的缓存也是非常有价值的，可以让请求不必走完整个后续处理流程，<strong>就近</strong> 获得响应结果。</p><p>特别是对于那些 <strong>读多写少</strong> 的数据，例如突发热点新闻、爆款商品的详情页，一秒钟内可能有成千上万次的请求。即使仅仅缓存数秒钟，也能够把巨大的访问流量挡在外面，让 RPS（request per second）降低好几个数量级，减轻应用服务器的并发压力，对性能的改善是非常显著的。</p><p>HTTP 的服务器缓存功能主要由代理服务器来实现（即缓存代理），而源服务器系统内部虽然也经常有各种缓存（如 Memcache、Redis、Varnish 等），但与 HTTP 没有太多关系，所以这里暂且不说。</p><h2 id="缓存代理服务" tabindex="-1"><a class="header-anchor" href="#缓存代理服务"><span>缓存代理服务</span></a></h2><p>我还是沿用「生鲜速递 + 便利店」的比喻，看看缓存代理是怎么回事。</p><p>便利店作为超市的代理，生意非常红火，顾客和超市双方都对现状非常满意。但时间一长，超市发现还有进一步提升的空间，因为每次便利店接到顾客的请求后都要专车跑一趟超市，还是挺麻烦的。</p><p>干脆这样吧，给便利店配发一个大冰柜。水果海鲜什么的都可以放在冰柜里，<strong>只要产品在保鲜期内，就允许顾客直接从冰柜提货</strong>。这样便利店就可以一次进货多次出货，省去了超市之间的运输成本。</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过这个比喻，你可以看到：在没有缓存的时候，代理服务器每次都是直接转发客户端和服务器的报文，中间不会存储任何数据，只有最简单的中转功能。</p><p>加入了缓存后就不一样了。</p><p>代理服务收到源服务器发来的响应数据后需要做两件事:</p><ul><li>第一个当然是把报文转发给客户端</li><li>而第二个就是把报文存入自己的 Cache 里。</li></ul><p>下一次再有相同的请求，代理服务器就可以直接发送 304 或者缓存数据，不必再从源服务器那里获取。这样就降低了客户端的等待时间，同时节约了源服务器的网络带宽。</p><p>在 HTTP 的缓存体系中，缓存代理的身份十分特殊，它「既是客户端，又是服务器」，同时也「既不是客户端，又不是服务器」。</p><p>说它即是客户端又是服务器，是因为它 <strong>面向源服务器时是客户端</strong> ，<strong>在面向客户端时又是服务器</strong> ，所以它即可以用客户端的缓存控制策略也可以用服务器端的缓存控制策略，也就是说它可以同时使用前面讲解的各种 <code>Cache-Control</code> 属性。</p><p>但缓存代理也「即不是客户端又不是服务器」，因为它只是一个数据的 <strong>中转站</strong> ，并不是真正的数据消费者和生产者，所以还需要有一些新的 <code>Cache-Control</code> 属性来对它做特别的约束。</p><h2 id="源服务器的缓存控制" tabindex="-1"><a class="header-anchor" href="#源服务器的缓存控制"><span>源服务器的缓存控制</span></a></h2><p>前面介绍了 4 种服务器端的 <code>Cache-Control</code> 属性：max-age、no_store、no_cache 和 must-revalidate，你应该还有印象吧？</p><p>这 4 种缓存属性 <strong>可以约束客户端，也可以约束代理</strong> 。</p><p>但客户端和代理是不一样的，客户端的缓存只是用户自己使用，而代理的缓存可能会为非常多的客户端提供服务。所以，需要对它的缓存再多一些限制条件。</p><p>首先，我们 <strong>要区分客户端上的缓存和代理上的缓存</strong> ，可以使用两个新属性 <strong>private</strong> 和 <strong>public</strong> 。</p><ul><li><code>private</code> 表示缓存只能在客户端保存，是用户 <strong>私有</strong> 的，不能放在代理上与别人共享。</li><li><code>public</code> 的意思就是缓存完全开放，谁都可以存，谁都可以用。</li></ul><p>比如你登录论坛，返回的响应报文里用 <code>Set-Cookie</code> 添加了论坛 ID，这就属于私人数据，不能存在代理上。不然，别人访问代理获取了被缓存的响应就麻烦了。</p><p>其次，<strong>缓存失效后的重新验证也要区分开</strong>（即使用条件请求 <code>Last-modified</code> 和 <code>ETag</code> ），<strong>must-revalidate</strong> 是只要过期就必须回源服务器验证，而新的 <strong>proxy-revalidate</strong> 只要求代理的缓存过期后必须验证，客户端不必回源，只验证到代理这个环节就行了。</p><p>再次，<strong>缓存的生存时间</strong> 可以使用新的 <strong>s-maxage</strong> （s 是 share 的意思，注意 maxage 中间没有 <code>-</code> ），只限定在代理上能够存多久，而客户端仍然使用 <code>max_age</code> 。</p><p>还有一个代理专用的属性 <strong>no-transform</strong> 。代理有时候会对缓存下来的数据做一些优化，比如把图片生成 png、webp 等几种格式，方便今后的请求处理，而 <code>no-transform</code> 就会禁止这样做，不许偷偷摸摸搞小动作。</p><p>这些新的缓存控制属性比较复杂，还是用便利店冷柜来举例好理解一些。</p><p>水果上贴着标签 <code>private, max-age=5</code> 。这就是说水果不能放进冷柜，必须直接给顾客，保鲜期 5 天，过期了还得去超市重新进货。</p><p>冻鱼上贴着标签 <code>public, max-age=5, s-maxage=10</code> 。这个的意思就是可以在冰柜里存 10 天，但顾客那里只能存 5 天，过期了可以来便利店取，只要在 10 天之内就不必再找超市。</p><p>排骨上贴着标签 <code>max-age=30, proxy-revalidate, no-transform</code> 。因为缓存默认是 public（这里有争议，很多地方写的 private） 的，那么它在便利店和顾客的冰箱里就都可以存 30 天，过期后便利店必须去超市进新货，而且不能擅自把大排改成小排。</p><p>下面的流程图是完整的服务器端缓存控制策略，可以同时控制客户端和代理。</p><figure><img src="'+o+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我还要提醒你一点，源服务器在设置完 <code>Cache-Control</code> 后必须要为报文加上 <code>Last-modified</code> 或 <code>ETag</code> 字段。否则，客户端和代理后面就无法使用条件请求来验证缓存是否有效，也就不会有 304 缓存重定向。</p><p><strong>稍微总结下新增的对代理的请求头</strong></p><p>数据是否允许代理缓存：</p><ul><li><code>private</code>：不允许</li><li><code>public</code>：允许</li></ul><p>缓存失效后重新验证：<code>proxy-revalidate</code> 代理缓存过期后必须验证，对应的是客户端的（<code>must-revalidate</code>）</p><p>缓存的生存时间：<code>s-maxage</code> 限制在代理服务器上能缓存多久</p><p>使用方式如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">private,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max-age=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">public,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max-age=5,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> s-maxage=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">max-age</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">30,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> proxy-revalidate,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no-transform</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="客户端的缓存控制" tabindex="-1"><a class="header-anchor" href="#客户端的缓存控制"><span>客户端的缓存控制</span></a></h2><p>客户端在 HTTP 缓存体系里要面对的是代理和源服务器，也必须区别对待，这里我就直接上图了，来个看图说话。</p><figure><img src="`+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>max-age、no_store、no_cache 这三个属性在前面已经介绍过了，它们也是同样作用于代理和源服务器。</p><p>关于缓存的生存时间，多了两个新属性 <strong>max-stale</strong> 和 <strong>min-fresh</strong> 。</p><ul><li><p>max-stale：可以接受的过期时间</p><p>意思是如果代理上的缓存过期了也可以接受，但不能过期太多，超过 x 秒也会不要</p></li><li><p>min-fresh：可以接受的新鲜时间</p><p>意思是缓存必须有效，而且必须在 x 秒后依然有效</p></li></ul><p>比如，草莓上贴着标签 <code>max-age=5</code> ，现在已经在冰柜里存了 7 天。如果有请求 <code>max-stale=2</code> ，意思是过期两天也能接受，所以刚好能卖出去。</p><p>但要是 <code>min-fresh=1</code> ，这是绝对不允许过期的，就不会买走。这时如果有另外一个菠萝是 <code>max-age=10</code> ，那么 <code>7+1&lt;10</code> ，在一天之后还是新鲜的，所以就能卖出去。</p><p>有的时候客户端还会发出一个特别的 <strong>only-if-cached</strong> 属性，表示 <strong>只接受代理缓存的数据</strong> ，不接受源服务器的响应。如果代理上没有缓存或者缓存过期，就应该给客户端返回一个 504（Gateway Timeout）。</p><h2 id="实验环境" tabindex="-1"><a class="header-anchor" href="#实验环境"><span>实验环境</span></a></h2><p>信息量有些大，到这里你是不是有点头疼了，好在我们还有实验环境，用 URI <code>http://www.chrono.com/22-1</code> 试一下吧。</p><p>它设置了 <code>Cache-Control: public, max-age=10, s-maxage=30</code> ，数据可以在浏览器里存 10 秒，在代理上存 30 秒，你可以反复刷新，看看代理和源服务器是怎么响应的，同样也可以配合 Wireshark 抓包。</p><p>代理在响应报文里还额外加了 <code>X-Cache</code>、<code>X-Hit</code> 等自定义头字段，表示缓存是否命中和命中率，方便你观察缓存代理的工作情况。</p><figure><img src="'+g+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>关于实验室里面的环境，代理这一块，笔者感觉是有问题的，自己测试的时候和老师的对不上</p></div><p>直接来看看后端代码的实现</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- http://www.chrono.com/22-1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/proxy/&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--ngx.log(ngx.ERR, &quot;exec &quot; .. path)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- redirect to internal /proxy</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 这里是内部重定向了</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    # </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cache</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  /</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/ {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        internal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">enable</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cache</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        proxy_cache</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> www_cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        proxy_cache_use_stale</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> error</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        proxy_pass</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">://</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.io;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">add_header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">upstream_cache_status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">add_header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        header_filter_by_lua_file</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lua</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cache_filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.lua;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cache_filter.lua 代码</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- Copyright (C) 2019 by chrono</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get_phase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() ~= </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;header_filter&#39; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cache_status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.var.upstream_cache_status</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> accel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.var.http_host or </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.var.server_name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.header[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;X-Cache&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cache_status</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.header[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;X-Accel&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">accel</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- hit rate</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> misc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.shared.misc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> total</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">misc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">incr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;total_req&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">misc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;hit&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) or </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cache_status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;HIT&#39; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    hit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">misc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">incr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;hit&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">total</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.header[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;X-Hit&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">string.format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;%.2f%%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端代码上并没有什么特别的做法，只是增加了几个自定义头，所以说，感觉和文章上所讲解的不一样。</p><h2 id="其他问题" tabindex="-1"><a class="header-anchor" href="#其他问题"><span>其他问题</span></a></h2><p>缓存代理的知识就快讲完了，下面再简单说两个相关的问题。</p>`,64)),a("p",null,[i[8]||(i[8]=s("第一个是 ")),i[9]||(i[9]=a("strong",null,"Vary",-1)),i[10]||(i[10]=s(" 字段，在 ")),l(n,{to:"/http-protocol/04/01.html"},{default:e(()=>i[7]||(i[7]=[s("HTTP 的实体数据")])),_:1}),i[11]||(i[11]=s(" 曾经说过，它是内容协商的结果，相当于报文的一个版本标记。"))]),i[14]||(i[14]=t('<p>同一个请求，经过内容协商后可能会有不同的字符集、编码、浏览器等版本。比如，<code>Vary: Accept-Encoding</code> 、<code>Vary: User-Agent</code> ，缓存代理必须要存储这些不同的版本。</p><p>当再收到相同的请求时，代理就读取缓存里的 <code>Vary</code> ，对比请求头里相应的 <code>Accept-Encoding</code> 、<code>User-Agent</code> 等字段，如果和上一个请求的完全匹配，比如都是 <code>gzip</code> 、<code>Chrome</code> ，就表示版本一致，可以返回缓存的数据。</p><p>另一个问题是 <strong>Purge</strong> ，也就是 <strong>缓存清理</strong> ，它对于代理也是非常重要的功能，例如：</p><ul><li>过期的数据应该及时淘汰，避免占用空间；</li><li>源站的资源有更新，需要删除旧版本，主动换成最新版（即刷新）；</li><li>有时候会缓存了一些本不该存储的信息，例如网络谣言或者危险链接，必须尽快把它们删除。</li></ul><p>清理缓存的方法有很多，比较常用的一种做法是使用自定义请求方法 <code>PURGE</code> ，发给代理服务器，要求删除 URI 对应的缓存数据。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><ol><li>计算机领域里最常用的性能优化手段是时空转换，也就是时间换空间或者空间换时间，HTTP 缓存属于后者；</li><li>缓存代理是增加了缓存功能的代理服务，缓存源服务器的数据，分发给下游的客户端；</li><li><code>Cache-Control</code> 字段也可以控制缓存代理，常用的有 <code>private</code>、<code>s-maxage</code> 、<code>no-transform</code> 等，同样必须配合 <code>Last-modified</code>、<code>ETag</code> 等字段才能使用；</li><li>缓存代理有时候也会带来负面影响，缓存不良数据，需要及时刷新或删除。</li></ol><h2 id="课下作业" tabindex="-1"><a class="header-anchor" href="#课下作业"><span>课下作业</span></a></h2><ol><li>加入了代理后 HTTP 的缓存复杂了很多，试着用自己的语言把这些知识再整理一下，画出有缓存代理时浏览器的工作流程图，加深理解。</li><li>缓存的时间策略很重要，太大太小都不好，你觉得应该如何设置呢？</li></ol><h2 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h2><ul><li>常用的缓存代理软件有 Squid、 Varnish、ATS( Apache Traffic Server) 等，而 Nginx 不仅是 Web 服务器、代理服务器，也是一个出色的缓存代理服务器，堪称全能。</li><li>有的缓存代理在 <code>Cache Hit</code> 的时候会在响应报文里加一个 Age 头字段，表示报文的生存时间，即已经在缓存里存了多久，通常它会小于 <code>Cache- Control</code> 里的 max-age 值，如果大于就意味着数据是陈旧的( stale)。</li><li>判断缓存是否命中 (Hit) 类似于查询 hash 表，使用的 key 通常就是 URI ，在 Nginx 里可以用指令 <code>proxy_cache_ key</code> 自定义。</li><li>Nginx 对 vary 的处理实际上是做了 MD5，把 vary 头摘要后写入缓存，请求时不仅比较 URI，也比较摘要。</li></ul>',11))])}const v=h(y,[["render",A],["__file","08.html.vue"]]),b=JSON.parse('{"path":"/http-protocol/04/08.html","title":"08 | 冷链周转：HTTP 的缓存代理","lang":"zh-CN","frontmatter":{"description":"08 | 冷链周转：HTTP 的缓存代理 前面讲解了 和 。那么，把这两者结合起来就是这节课所要说的 缓存代理，也就是支持缓存控制的代理服务。 之前谈到缓存时，主要讲了客户端（浏览器）上的缓存控制，它能够减少响应时间、节约带宽，提升客户端的用户体验 。 但 HTTP 传输链路上，不只是客户端有缓存，服务器上的缓存也是非常有价值的，可以让请求不必走完整个...","head":[["meta",{"property":"og:url","content":"https://www.pvzge.com/blog_technical/http-protocol/04/08.html"}],["meta",{"property":"og:title","content":"08 | 冷链周转：HTTP 的缓存代理"}],["meta",{"property":"og:description","content":"08 | 冷链周转：HTTP 的缓存代理 前面讲解了 和 。那么，把这两者结合起来就是这节课所要说的 缓存代理，也就是支持缓存控制的代理服务。 之前谈到缓存时，主要讲了客户端（浏览器）上的缓存控制，它能够减少响应时间、节约带宽，提升客户端的用户体验 。 但 HTTP 传输链路上，不只是客户端有缓存，服务器上的缓存也是非常有价值的，可以让请求不必走完整个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-21T11:38:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-21T11:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"08 | 冷链周转：HTTP 的缓存代理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-21T11:38:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo\\",\\"url\\":\\"https://blog.csdn.net/liao_rh\\"}]}"]]},"headers":[{"level":2,"title":"缓存代理服务","slug":"缓存代理服务","link":"#缓存代理服务","children":[]},{"level":2,"title":"源服务器的缓存控制","slug":"源服务器的缓存控制","link":"#源服务器的缓存控制","children":[]},{"level":2,"title":"客户端的缓存控制","slug":"客户端的缓存控制","link":"#客户端的缓存控制","children":[]},{"level":2,"title":"实验环境","slug":"实验环境","link":"#实验环境","children":[]},{"level":2,"title":"其他问题","slug":"其他问题","link":"#其他问题","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"课下作业","slug":"课下作业","link":"#课下作业","children":[]},{"level":2,"title":"拓展阅读","slug":"拓展阅读","link":"#拓展阅读","children":[]}],"git":{"createdTime":1734781126000,"updatedTime":1734781126000,"contributors":[{"name":"liao_rh","username":"liao_rh","email":"993929808@qq.com","commits":1,"url":"https://github.com/liao_rh"}]},"readingTime":{"minutes":11.34,"words":3402},"filePathRelative":"http-protocol/04/08.md","localizedDate":"2024年12月21日","autoDesc":true}');export{v as comp,b as data};
