import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,i as t,o as s}from"./app-DOYXvAgo.js";const n="/blog_technical/assets/image-20210117210523984-ZIZHSzo3.png",l="/blog_technical/assets/image-20210117211938381-DNmS1nYC.png",r="/blog_technical/assets/image-20210117215032826-BDd1TlNS.png",p="/blog_technical/assets/image-20210117215231403-COLQutfe.png",c="/blog_technical/assets/image-20210117215523473-D2svioSc.png",g="/blog_technical/assets/image-20210117215848221-BG-aYtSz.png",o="/blog_technical/assets/image-20210117220016498-C4nbJ_fk.png",h="/blog_technical/assets/image-20210117220446231-DPpeUSPg.png",d="/blog_technical/assets/image-20210117221101215-dZcIn9Vp.png",m="/blog_technical/assets/image-20210117221114887-VKITQcsJ.png",u={};function k(f,i){return s(),e("div",null,i[0]||(i[0]=[t(`<h1 id="监控本地-java-进程" tabindex="-1"><a class="header-anchor" href="#监控本地-java-进程"><span>监控本地 JAVA 进程</span></a></h1><p>相当于是前面那些命令的一个集成</p><p>JVisualVM 是 java 自带的工具，一般在 jdk 安装目录下的 bin 目录下</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 笔者这里是 mac 系统，查找这个文件名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mrcode:chapter2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mrcode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mdfind</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;jvisualvm&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/usr/bin/jvisualvm</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 这里有一个指令，可以直接在中断中运行 jvisualvm 就打开了</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/bin/jvisualvm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开这个软件后的截图如下</p><figure><img src="`+n+'" alt="image-20210117210523984" tabindex="0" loading="lazy"><figcaption>image-20210117210523984</figcaption></figure><p>可以看到上面直接就列出来了，入门指南、故障排除指南等文档。</p><p>在左边「本地」，会直接列出本机的 JAVA 进程虚拟机程序。</p><p>这里讲解其中一些，另外一些和前面讲解的差不多，比如这个线程</p><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h2><figure><img src="'+l+'" alt="image-20210117211938381" tabindex="0" loading="lazy"><figcaption>image-20210117211938381</figcaption></figure><p>它有一个线程可视化，右侧还有一个 「线程 Dump」这个就是使用 jstack 输出信息。</p><p>这个线程可视化还是很方便，很清晰的就能找到产生死锁的两个线程。</p><h2 id="抽样器" tabindex="-1"><a class="header-anchor" href="#抽样器"><span>抽样器</span></a></h2><figure><img src="'+r+'" alt="image-20210117215032826" tabindex="0" loading="lazy"><figcaption>image-20210117215032826</figcaption></figure><p>我们最关注的两个性能数据都在这里了</p><h3 id="cpu-抽样器" tabindex="-1"><a class="header-anchor" href="#cpu-抽样器"><span>CPU 抽样器</span></a></h3><p>它可以显示方法使用 CPU 时间，一般用于发现热点方法。</p><figure><img src="'+p+'" alt="image-20210117215231403" tabindex="0" loading="lazy"><figcaption>image-20210117215231403</figcaption></figure><p>比如上图中上一节课我们做的死循环方法，这里就能直接看到。特别是定位程序慢的时候，非常好用</p><h3 id="内存抽样器" tabindex="-1"><a class="header-anchor" href="#内存抽样器"><span>内存抽样器</span></a></h3><p>差不多类似 gc 数据，不过这里更详细更直观，能实时动态的展示每个对象的信息</p><figure><img src="'+c+'" alt="image-20210117215523473" tabindex="0" loading="lazy"><figcaption>image-20210117215523473</figcaption></figure><h2 id="插件管理" tabindex="-1"><a class="header-anchor" href="#插件管理"><span>插件管理</span></a></h2><h3 id="visual-gc" tabindex="-1"><a class="header-anchor" href="#visual-gc"><span>Visual GC</span></a></h3><p>比如这个界面，名为 Visual GC 的界面</p><figure><img src="'+g+'" alt="image-20210117215848221" tabindex="0" loading="lazy"><figcaption>image-20210117215848221</figcaption></figure><p>该功能默认是没有的，是通过插件安装的。</p><p>插件功能通过：顶部菜单「工具」→「插件」打开插件管理中心</p><figure><img src="'+o+'" alt="image-20210117220016498" tabindex="0" loading="lazy"><figcaption>image-20210117220016498</figcaption></figure><p>笔者这里是可以直接操作安装的，安装完成之后，需要勾选插件，然后重启 JVisualVM 就会出现这个功能了。</p><p>如果说，你打开之后直接操作安装无效，则查看下设置里面</p><figure><img src="'+h+'" alt="image-20210117220446231" tabindex="0" loading="lazy"><figcaption>image-20210117220446231</figcaption></figure><p>需要添加插件中心地址，这个需要添加与你 jdk 版本一样的，里面的地址在 <a href="https://visualvm.github.io/pluginscenters.html" target="_blank" rel="noopener noreferrer">官网这个页面</a></p><h3 id="btrace-workbench" tabindex="-1"><a class="header-anchor" href="#btrace-workbench"><span>BTrace Workbench</span></a></h3><p>这一个是后面课程中要用到的 BTrace 图形化界面。</p><p>安装后，是通过右键的方式进入，如下图</p><figure><img src="'+d+'" alt="image-20210117221101215" tabindex="0" loading="lazy"><figcaption>image-20210117221101215</figcaption></figure><figure><img src="'+m+'" alt="image-20210117221114887" tabindex="0" loading="lazy"><figcaption>image-20210117221114887</figcaption></figure><p>就可以直接编辑 BTrace 脚本了。</p>',40)]))}const v=a(u,[["render",k],["__file","01.html.vue"]]),y=JSON.parse('{"path":"/monitor-tuning/02/01.html","title":"监控本地 JAVA 进程","lang":"zh-CN","frontmatter":{"description":"监控本地 JAVA 进程 相当于是前面那些命令的一个集成 JVisualVM 是 java 自带的工具，一般在 jdk 安装目录下的 bin 目录下 打开这个软件后的截图如下 image-20210117210523984image-20210117210523984 可以看到上面直接就列出来了，入门指南、故障排除指南等文档。 在左边「本地」，会直接列...","head":[["meta",{"property":"og:url","content":"https://www.pvzge.com/blog_technical/monitor-tuning/02/01.html"}],["meta",{"property":"og:title","content":"监控本地 JAVA 进程"}],["meta",{"property":"og:description","content":"监控本地 JAVA 进程 相当于是前面那些命令的一个集成 JVisualVM 是 java 自带的工具，一般在 jdk 安装目录下的 bin 目录下 打开这个软件后的截图如下 image-20210117210523984image-20210117210523984 可以看到上面直接就列出来了，入门指南、故障排除指南等文档。 在左边「本地」，会直接列..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-21T11:38:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-21T11:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"监控本地 JAVA 进程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-21T11:38:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo\\",\\"url\\":\\"https://blog.csdn.net/liao_rh\\"}]}"]]},"headers":[{"level":2,"title":"线程","slug":"线程","link":"#线程","children":[]},{"level":2,"title":"抽样器","slug":"抽样器","link":"#抽样器","children":[{"level":3,"title":"CPU 抽样器","slug":"cpu-抽样器","link":"#cpu-抽样器","children":[]},{"level":3,"title":"内存抽样器","slug":"内存抽样器","link":"#内存抽样器","children":[]}]},{"level":2,"title":"插件管理","slug":"插件管理","link":"#插件管理","children":[{"level":3,"title":"Visual GC","slug":"visual-gc","link":"#visual-gc","children":[]},{"level":3,"title":"BTrace Workbench","slug":"btrace-workbench","link":"#btrace-workbench","children":[]}]}],"git":{"createdTime":1734781126000,"updatedTime":1734781126000,"contributors":[{"name":"liao_rh","username":"liao_rh","email":"993929808@qq.com","commits":1,"url":"https://github.com/liao_rh"}]},"readingTime":{"minutes":2.03,"words":609},"filePathRelative":"monitor-tuning/02/01.md","localizedDate":"2024年12月21日","autoDesc":true}');export{v as comp,y as data};
