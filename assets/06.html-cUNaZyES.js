import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,l,b as s,d as i,e as n,g as p,r as d,o as r}from"./app-DkoZ4GQJ.js";const c="/blog_technical/assets/6b020454987543efdd1cf6ddec784bf2-CApo7DIE.png",g="/blog_technical/assets/e51df3245609880641043af65bba94ac-5dMiAbtx.png",h={};function m(u,e){const a=d("RouteLink");return r(),t("div",null,[e[9]||(e[9]=l('<h1 id="_06-域名里有哪些门道" tabindex="-1"><a class="header-anchor" href="#_06-域名里有哪些门道"><span>06 | 域名里有哪些门道？</span></a></h1><p>在上一讲里，我们学习了 HTTP 协议使用的 TCP/IP 协议栈，知道了 HTTP 协议是运行在 TCP/IP 上的。</p><p>IP 协议的职责是 <strong>网际互连</strong> ，它在 MAC 层之上，使用 IP 地址把 MAC 编号转换成了四位数字，这就对物理网卡的 MAC 地址做了一层抽象，发展出了许多的「新玩法」。</p><p>例如，分为 A、B、C、D、E 五种类型，公有地址和私有地址，掩码分割子网等。只要每个小网络在 IP 地址这个概念上达成一致，不管它在 MAC 层有多大的差异，都可以接入 TCP/IP 协议栈，最终汇合进整个互联网。</p><p>但接入互联网的计算机越来越多，IP 地址的缺点也就暴露出来了，最主要的是它“对人不友好”，虽然比 MAC 的 16 进制数要好一点，但还是难于记忆和输入。</p><p>怎么解决这个问题呢？</p><p>那就「以其人之道还治其人之身」，在 IP 地址之上再来一次抽象，把数字形式的 IP 地址转换成更有意义更好记的名字，在字符串的层面上再增加「新玩法」。于是，DNS 域名系统就这么出现了。</p><h2 id="域名的形式" tabindex="-1"><a class="header-anchor" href="#域名的形式"><span>域名的形式</span></a></h2>',8)),s("p",null,[e[1]||(e[1]=i("在第 ")),n(a,{to:"/database/02/04.html"},{default:p(()=>e[0]||(e[0]=[i("4 讲")])),_:1}),e[2]||(e[2]=i(" 曾经说过，域名是一个有层次的结构，是一串用 ")),e[3]||(e[3]=s("code",null,".",-1)),e[4]||(e[4]=i(" 分隔的多个单词，最右边的被称为 ")),e[5]||(e[5]=s("strong",null,"顶级域名",-1)),e[6]||(e[6]=i("，然后是 ")),e[7]||(e[7]=s("strong",null,"二级域名",-1)),e[8]||(e[8]=i(" ，层级关系向左依次降低。"))]),e[10]||(e[10]=l(`<p>最左边的是主机名，通常用来表明主机的用途，比如 <code>www</code> 表示提供万维网服务、<code>mail</code> 表示提供邮件服务，不过这也不是绝对的，名字的关键是要让我们容易记忆。</p><p>看一下极客时间的域名 <code>time.geekbang.org</code> ，这里的 <code>org</code> 就是顶级域名，<code>geekbang</code> 是二级域名，<code>time</code> 则是主机名。使用这个域名，DNS 就会把它转换成相应的 IP 地址，你就可以访问极客时间的网站了。</p><p>域名不仅能够代替 IP 地址，还有许多其他的用途。</p><p>在 Apache、Nginx 这样的 Web 服务器里，域名可以用来标识虚拟主机，决定由哪个虚拟主机来对外提供服务，比如在 Nginx 里就会使用 <code>server_name</code> 指令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    listen 80;                       # 监听 80 端口</span></span>
<span class="line"><span>    server_name  time.geekbang.org;  # 主机名是 time.geekbang.org</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>域名本质上还是个 <strong>名字空间系统</strong>，使用多级域名就可以划分出不同的国家、地区、组织、公司、部门，每个域名都是独一无二的，可以作为一种身份的标识。</p><p>举个例子吧，假设 A 公司里有个小明，B 公司里有个小强，于是他们就可以分别说是「小明.A 公司」，「小强.B 公司」，即使 B 公司里也有个小明也不怕，可以标记为「小明.B 公司」，很好地解决了重名问题。</p><p>因为这个特性，域名也被扩展到了其他应用领域，比如 Java 的包机制就采用域名作为命名空间，只是它使用了反序。如果极客时间要开发 Java 应用，那么它的包名可能就是 <code>org.geekbang.time</code> 。</p><p>而 XML 里使用 URI 作为名字空间，也是间接使用了域名。</p><h2 id="域名的解析" tabindex="-1"><a class="header-anchor" href="#域名的解析"><span>域名的解析</span></a></h2><p>就像 IP 地址必须转换成 MAC 地址才能访问主机一样，域名也必须要转换成 IP 地址，这个过程就是 <strong>域名解析</strong> 。</p><p>目前全世界有几亿个站点，有几十亿网民，而每天网络上发生的 HTTP 流量更是天文数字。这些请求绝大多数都是基于域名来访问网站的，所以 DNS 就成了互联网的重要基础设施，必须要保证域名解析稳定可靠、快速高效。</p><p>DNS 的核心系统是一个三层的树状、分布式服务，基本对应域名的结构：</p><ol><li>根域名服务器（Root DNS Server）：管理顶级域名服务器，返回 <code>com</code>、<code>net</code>、<code>cn</code> 等顶级域名服务器的 IP 地址；</li><li>顶级域名服务器（Top-level DNS Server）：管理各自域名下的权威域名服务器，比如 com 顶级域名服务器可以返回 apple.com 域名服务器的 IP 地址；</li><li>权威域名服务器（Authoritative DNS Server）：管理自己域名下主机的 IP 地址，比如 apple.com 权威域名服务器可以返回 <code>www.apple.com</code> 的 IP 地址。</li></ol><figure><img src="`+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在这里根域名服务器是关键，它必须是众所周知的，否则下面的各级服务器就无从谈起了。目前全世界共有 13 组根域名服务器，又有数百台的镜像，保证一定能够被访问到。</p><p>有了这个系统以后，任何一个域名都可以在这个树形结构里从顶至下进行查询，就好像是把域名从右到左顺序走了一遍，最终就获得了域名对应的 IP 地址。</p><p>例如，你要访问 <code>www.apple.com</code> ，就要进行下面的三次查询：</p><ol><li>访问根域名服务器，它会告诉你 <code>com</code> 顶级域名服务器的地址；</li><li>访问 <code>com</code> 顶级域名服务器，它再告诉你 <code>apple.com</code> 域名服务器的地址；</li><li>最后访问 <code>apple.com</code> 域名服务器，就得到了 <code>www.apple.com</code> 的地址。</li></ol><p>虽然核心的 DNS 系统遍布全球，服务能力很强也很稳定，但如果全世界的网民都往这个系统里挤，即使不挤瘫痪了，访问速度也会很慢。</p><p>所以在核心 DNS 系统之外，还有两种手段用来减轻域名解析的压力，并且能够更快地获取结果，基本思路就是 <strong>缓存</strong> 。</p><p>首先，许多大公司、网络运行商都会建立自己的 DNS 服务器，作为用户 DNS 查询的代理，代替用户访问核心 DNS 系统。这些「野生」服务器被称为「非权威域名服务器」，可以缓存之前的查询结果，如果已经有了记录，就无需再向根服务器发起查询，直接返回对应的 IP 地址。</p><p>这些 DNS 服务器的数量要比核心系统的服务器多很多，而且大多部署在离用户很近的地方。比较知名的 DNS 有 Google 的 <code>8.8.8.8</code>，Microsoft 的 <code>4.2.2.1</code> ，还有 CloudFlare 的 <code>1.1.1.1</code> 等等。</p><p>其次，操作系统里也会对 DNS 解析结果做缓存，如果你之前访问过 <code>www.apple.com</code> ，那么下一次在浏览器里再输入这个网址的时候就不会再跑到 DNS 那里去问了，直接在操作系统里就可以拿到 IP 地址。</p><p>另外，操作系统里还有一个特殊的 <strong>主机映射</strong> 文件，通常是一个可编辑的文本，在 Linux 里是 <code>/etc/hosts</code>，在 Windows 里是 <code>C:\\WINDOWS\\system32\\drivers\\etc\\hosts</code> ，如果操作系统在缓存里找不到 DNS 记录，就会找这个文件。</p><p>有了上面的野生 DNS 服务器、操作系统缓存和 hosts 文件后，很多域名解析的工作就都不用跋山涉水了，直接在本地或本机就能解决，不仅方便了用户，也减轻了各级 DNS 服务器的压力，效率就大大提升了。</p><p>下面的这张图比较完整地表示了现在的 DNS 架构。</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在 Nginx 里有这么一条配置指令 <code>resolver</code> ，它就是用来配置 DNS 服务器的，如果没有它，那么 Nginx 就无法查询域名对应的 IP，也就无法反向代理到外部的网站。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolver</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8.8.8.8</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> valid=30s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定 Google 的 DNS，缓存 30 秒</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="域名的新玩法" tabindex="-1"><a class="header-anchor" href="#域名的新玩法"><span>域名的新玩法</span></a></h2><p>有了域名，又有了可以稳定工作的解析系统，于是我们就可以实现比 IP 地址更多的新玩法了。</p><p>第一种，也是最简单的，<strong>重定向</strong> 。因为域名代替了 IP 地址，所以可以让对外服务的域名不变，而主机的 IP 地址任意变动。当主机有情况需要下线、迁移时，可以更改 DNS 记录，让域名指向其他的机器。</p><p>比如，你有一台 <code>buy.tv</code> 的服务器要临时停机维护，那你就可以通知 DNS 服务器：我这个 buy.tv 域名的地址变了啊，原先是 1.2.3.4，现在是 5.6.7.8，麻烦你改一下。DNS 于是就修改内部的 IP 地址映射关系，之后再有访问 buy.tv 的请求就不走 1.2.3.4 这台主机，改由 5.6.7.8 来处理，这样就可以保证业务服务不中断。</p><p>第二种，因为域名是一个名字空间，所以可以使用 <code>bind9</code> 等开源软件搭建一个在内部使用的 DNS，作为名字服务器。这样我们开发的各种内部服务就都用域名来标记，比如数据库服务都用域名 <code>mysql.inner.app</code> ，商品服务都用 <code>goods.inner.app</code> ，发起网络通信时也就不必再使用写死的 IP 地址了，可以直接用域名，而且这种方式也兼具了第一种玩法的优势。</p><p>第三种玩法包含了前两种，也就是 <strong>基于域名实现的负载均衡</strong> 。</p><p>这种玩法也有两种方式，两种方式可以混用。</p><ul><li>第一种方式，因为域名解析可以返回多个 IP 地址，所以一个域名可以对应多台主机，客户端收到多个 IP 地址后，就可以自己使用轮询算法依次向服务器发起请求，实现负载均衡。</li><li>第二种方式，域名解析可以配置内部的策略，返回离客户端最近的主机，或者返回当前服务质量最好的主机，这样在 DNS 端把请求分发到不同的服务器，实现负载均衡。</li></ul><p>前面我们说的都是可信的 DNS，如果有一些不怀好意的 DNS，那么它也可以在域名这方面做手脚，弄一些比较恶意的玩法，举两个例子：</p><ul><li><strong>域名屏蔽</strong> ，对域名直接不解析，返回错误，让你无法拿到 IP 地址，也就无法访问网站；</li><li><strong>域名劫持</strong> ，也叫 <strong>域名污染</strong>，你要访问 A 网站，但 DNS 给了你 B 网站。</li></ul><p>好在互联网上还是好人多，而且 DNS 又是互联网的基础设施，这些恶意 DNS 并不多见，你上网的时候不需要太过担心。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>这次我们学习了与 HTTP 协议有重要关系的域名和 DNS，在这里简单小结一下今天的内容：</p><ol><li>域名使用字符串来代替 IP 地址，方便用户记忆，本质上一个名字空间系统；</li><li>DNS 就像是我们现实世界里的电话本、查号台，统管着互联网世界里的所有网站，是一个超级大管家；</li><li>DNS 是一个树状的分布式查询系统，但为了提高查询效率，外围有多级的缓存；</li><li>使用 DNS 可以实现基于域名的负载均衡，既可以在内网，也可以在外网。</li></ol><h2 id="课下作业" tabindex="-1"><a class="header-anchor" href="#课下作业"><span>课下作业</span></a></h2><ol><li><p>在浏览器地址栏里随便输入一个不存在的域名，比如就叫 <code>www.</code> 不存在 <code>.com</code> ，试着解释一下它的 DNS 解析过程。</p><p>浏览器缓存 -&gt; 操作系统缓存 -&gt; 操作系统 host 文件 -&gt; dns 服务器</p><p>而 dns 服务器查找顺序为：非权威 dns 服务器 -&gt; 根域名服务器 -&gt; 顶级域名服务器 -&gt; 二级域名服务器</p></li><li><p>如果因为某些原因，DNS 失效或者出错了，会出现什么后果？</p><p>失效：无法访问到该地址，域名屏蔽</p><p>出错：解析到了别人的地址，域名污染</p></li></ol><h2 id="课外小贴士" tabindex="-1"><a class="header-anchor" href="#课外小贴士"><span>课外小贴士</span></a></h2><ol><li>早期的域名系统只支持使用英文，而且顶级域名被限制在三个字以内，但随着互联网的发展限制已经解除了这些限制，可以使用中文作为域名，而且在 com、net、gov 等之外新增了 asia、media、museum 等许多新类别的顶级域名</li><li>域名的总长度限制在 253 个字符以内，而每一级域名长度不能超过 63 个字符</li><li>域名是大小写无关的，但通常都使用小写的形式</li><li>过长的域名或则过多的层次关系也会导致与 IP 地址同样难于记忆的问题，所以场景的域名大多是两级或三级，四级以上很少见</li></ol><h2 id="拓展问题" tabindex="-1"><a class="header-anchor" href="#拓展问题"><span>拓展问题</span></a></h2><ul><li><p>为何全世界只有 13 组根域名服务器呢？</p><p>细节原因不好解释，简单来说是因为 dns 协议还有 udp 协议里包大小的限制，只有 512 字节，再除以 dns 记录长度，最多 15 组，再去掉 buffer。</p></li><li><p>终极 dns 的解析是有谁实现的或者谁规定的</p><p>域名由专门的域名注册机构管理，终极的是ICANN。IP地址的分配也由 ICANN 管理，当然有浪费，美国是互联网的发明国，所以占用 ip 地址最多。ip 地址查找由专门的协议，比如 arp。</p></li><li><p>当域名所对应的 ip 发生变化的时候，因为上述说到有权威 dns 服务器（缓存），它是如何知道的？包括权威的 dns 服务器</p><p>域名解析有个 ttl 有效期，到期就会去上一级 dns 重新获取，当然也可以主动刷新。</p></li><li><p>比如我备案了一个域名 www.abc.com ，是不是 abc.com 就会注册到根域名服务器上，这个根域名服务器，顶级域名服务器也是某个公司开发的吗？</p><p>根和顶级 dns 由互联网组织 ICANN 管理，不属于任何公司。根 dns 只管理顶级 dns（如 com、cn）。</p></li><li><p>操作系统的 dns 缓存是什么？</p><p>在 Windows 上可以用命令行 <code>ipconfig /displaydns</code> 看缓存的 dns，存在系统内部。</p></li></ul>',50))])}const N=o(h,[["render",m],["__file","06.html.vue"]]),k=JSON.parse('{"path":"/database/02/06.html","title":"06 | 域名里有哪些门道？","lang":"zh-CN","frontmatter":{"description":"06 | 域名里有哪些门道？ 在上一讲里，我们学习了 HTTP 协议使用的 TCP/IP 协议栈，知道了 HTTP 协议是运行在 TCP/IP 上的。 IP 协议的职责是 网际互连 ，它在 MAC 层之上，使用 IP 地址把 MAC 编号转换成了四位数字，这就对物理网卡的 MAC 地址做了一层抽象，发展出了许多的「新玩法」。 例如，分为 A、B、C、D...","head":[["meta",{"property":"og:url","content":"https://www.pvzge.com/blog_technical/database/02/06.html"}],["meta",{"property":"og:title","content":"06 | 域名里有哪些门道？"}],["meta",{"property":"og:description","content":"06 | 域名里有哪些门道？ 在上一讲里，我们学习了 HTTP 协议使用的 TCP/IP 协议栈，知道了 HTTP 协议是运行在 TCP/IP 上的。 IP 协议的职责是 网际互连 ，它在 MAC 层之上，使用 IP 地址把 MAC 编号转换成了四位数字，这就对物理网卡的 MAC 地址做了一层抽象，发展出了许多的「新玩法」。 例如，分为 A、B、C、D..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-21T15:05:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-21T15:05:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06 | 域名里有哪些门道？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-21T15:05:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo\\",\\"url\\":\\"https://blog.csdn.net/liao_rh\\"}]}"]]},"headers":[{"level":2,"title":"域名的形式","slug":"域名的形式","link":"#域名的形式","children":[]},{"level":2,"title":"域名的解析","slug":"域名的解析","link":"#域名的解析","children":[]},{"level":2,"title":"域名的新玩法","slug":"域名的新玩法","link":"#域名的新玩法","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"课下作业","slug":"课下作业","link":"#课下作业","children":[]},{"level":2,"title":"课外小贴士","slug":"课外小贴士","link":"#课外小贴士","children":[]},{"level":2,"title":"拓展问题","slug":"拓展问题","link":"#拓展问题","children":[]}],"git":{"createdTime":1734781126000,"updatedTime":1734793533000,"contributors":[{"name":"liao_rh","username":"liao_rh","email":"993929808@qq.com","commits":2,"url":"https://github.com/liao_rh"}]},"readingTime":{"minutes":11.71,"words":3512},"filePathRelative":"database/02/06.md","localizedDate":"2024年12月21日","autoDesc":true}');export{N as comp,k as data};
