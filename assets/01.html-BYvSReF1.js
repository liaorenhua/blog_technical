import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,l as n,o as l}from"./app-B5S879k5.js";const t="/blog_technical/assets/image-20210207174523696-zU9Ucv5t.png",h="/blog_technical/assets/image-20210207174547162-BKoFqypa.png",e="/blog_technical/assets/image-20210207174628514-BFIpOa7e.png",k="/blog_technical/assets/image-20210207174722054-e8k5U0sQ.png",p="/blog_technical/assets/image-20210207174747794-DFVq7QaO.png",d="/blog_technical/assets/image-20210207174830081-DOFNZwOF.png",r={};function c(g,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="jvm-字节码指令与-javap" tabindex="-1"><a class="header-anchor" href="#jvm-字节码指令与-javap"><span>JVM 字节码指令与 javap</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">用法:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> javap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">option</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">classe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">其中,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可能的选项包括:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -help</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --help</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        输出此用法消息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -version</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                 版本信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -v</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -verbose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             输出附加信息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                       输出行号和本地变量表</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -public</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                  仅显示公共类和成员</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -protected</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">               显示受保护的/公共类和成员</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                 显示程序包/受保护的/公共类</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                           和成员</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (默认)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -private</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             显示所有类和成员</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                       对代码进行反汇编</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                       输出内部类型签名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -sysinfo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                 显示正在处理的类的</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                           系统信息</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (路径, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">大小,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 日期,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MD5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 散列</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -constants</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">               显示最终常量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -classpath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;        </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">指定查找用户类文件的位置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;               </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">指定查找用户类文件的位置</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -bootclasspath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;    </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">覆盖引导类文件的位置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一些官方文档地址：</p><ul><li><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener noreferrer">JAVA 虚拟机规范</a></p></li><li><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4" target="_blank" rel="noopener noreferrer">常量池</a></p></li><li><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html" target="_blank" rel="noopener noreferrer">虚拟机指令集</a>：查阅各个指令的含义</p></li></ul><h2 id="查看一个-class-文件的字节码信息" tabindex="-1"><a class="header-anchor" href="#查看一个-class-文件的字节码信息"><span>查看一个 class 文件的字节码信息</span></a></h2><blockquote><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4" target="_blank" rel="noopener noreferrer">CLass 文件格式官方文档</a> 再次强调：本节内容知识，要想明白最好通读下官方文档的说明，里面讲得很详细</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> cn.mrcode.stady.monitor_tuning.chapter8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 IDEA 开发的话，直接找到 class 目录（这个要看你用的是什么打包工具），笔者是 gradle</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入到该文件的 class 文件</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /Users/mrcode/IdeaProjects/monitor-tuning/build/classes/java/main/cn/mrcode/stady/monitor_tuning/chapter8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#输出到指定文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javap</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Test1.class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test1.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test1.txt 文件内容如下，里面就是对应的字节码内容</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Classfile </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Users</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mrcode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">IdeaProjects</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">monitor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">tuning</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">classes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">java</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">cn</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mrcode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">stady</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">monitor_tuning</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">chapter8</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Last</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> modified </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2021</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> size </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">659</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> bytes</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  MD5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> checksum 354fdbdbbc2263bb6c52bf320134a8d9</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Compiled</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> from </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Test1.java&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 类名与 JDK 版本号</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> cn</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">.mrcode.stady.monitor_tuning.chapter8.Test1</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  minor version: 0</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  major version: 52</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  flags: ACC_PUBLIC, ACC_SUPER  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 访问标识符</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 常量池</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 里面的引用都是符号引用，在运行时会转成直接引用</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">Constant pool: </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 方法引用，部分常量后面的注释是引用的内容，可以跳到具体的常量查看</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 也可以直接看后面的注释内容</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #1 = Methodref          #5.#24         </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #2 = Fieldref           #25.#26        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #3 = Methodref          #27.#28        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 第 4 个常量是一个 Class 引用了 #29 这个常量</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #4 = Class              #29            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// cn/mrcode/stady/monitor_tuning/chapter8/Test1</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #5 = Class              #30            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// java/lang/Object</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 构造函数  </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #6 = Utf8               </span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">init</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #7 = Utf8               ()V</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #8 = Utf8               Code</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">   #9 = Utf8               LineNumberTable</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #10 = Utf8               LocalVariableTable</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #11 = Utf8               this</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #12 = Utf8               Lcn/mrcode/stady/monitor_tuning/chapter8/Test1;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #13 = Utf8               main</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #14 = Utf8               ([Ljava/lang/String;)V</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #15 = Utf8               args</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #16 = Utf8               [Ljava/lang/String;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #17 = Utf8               a</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #18 = Utf8               I</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #19 = Utf8               b</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #20 = Utf8               c</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #21 = Utf8               MethodParameters</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #22 = Utf8               SourceFile</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #23 = Utf8               Test1.java</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #24 = NameAndType        #6:#7          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #25 = Class              #31            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// java/lang/System</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #26 = NameAndType        #32:#33        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #27 = Class              #34            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// java/io/PrintStream</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #28 = NameAndType        #35:#36        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// println:(I)V</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // #29 常量，是一个 Utf8，即是一个字符串                          </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #29 = Utf8               cn/mrcode/stady/monitor_tuning/chapter8/Test1</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #30 = Utf8               java/lang/Object</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #31 = Utf8               java/lang/System</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #32 = Utf8               out</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #33 = Utf8               Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #34 = Utf8               java/io/PrintStream</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #35 = Utf8               println</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">  #36 = Utf8               (I)V</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">                            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> cn.mrcode.stady.monitor_tuning.chapter8.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    descriptor: ()V  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 构造函数，返回是 void</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    Code:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">      stack=1, locals=1, args_size=1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">         0: aload_0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">         1: invokespecial #1                  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">         4: return</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">      LineNumberTable:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        line 3: 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">      LocalVariableTable:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">            0       5     0  this   Lcn/mrcode/stady/monitor_tuning/chapter8/Test1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // main 函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    descriptor: ([Ljava/lang/String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">V</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    flags</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ACC_PUBLIC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ACC_STATIC</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    Code</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // code 里面的内容也就是我们在 psvm 里面编写的类容的字节码</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 操作栈的深度为 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 本地变量表最大长度（slot 为单位），64 位是 2，其他是 1，索引从 0 开始，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // 如果是非 static 方法，索引 0 代表 this，后面是入参</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // 本地变量表在这个信息的最后面有也就是：LocalVariableTable</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 有 1 个参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      stack</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> locals</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> args_size</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iconst_2		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 常量 2 压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> istore_1		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 出栈保存到本地变量 1 里面</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iconst_3		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 常量 3 压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         3</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> istore_2		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 出栈保存到本地变量 2 里面</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         4</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iload_1		  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 局部变量 1 压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         5</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iload_2		  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 局部变量 2 压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         6</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iadd		    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 栈顶两个元素相加，计算结果压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         7</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> istore_3	  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 出栈保存到局部变量 3 里面</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         8</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> getstatic     #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        11</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iload_3</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        12</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> invokevirtual #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        15</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> return</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 行号表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // line 5: 对应文件里面的代码行号</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 0：代表的是 code 里面的前面的操作步骤</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      LineNumberTable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 本地变量表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      LocalVariableTable</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Start</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Length</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Slot</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Name</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">   Signature</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      16</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  args   [Ljava</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      14</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">     a   </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">I</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      12</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">     b   </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">I</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">     c   </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">I</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    MethodParameters</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      Name</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                           Flags</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      args</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">SourceFile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Test1.java&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字段描述符" tabindex="-1"><a class="header-anchor" href="#字段描述符"><span>字段描述符</span></a></h3><table><thead><tr><th><em>FieldType</em> term <br> 字节类型</th><th>Type<br> 原码类型</th><th>Interpretation</th></tr></thead><tbody><tr><td><code>B</code></td><td><code>byte</code></td><td>signed byte</td></tr><tr><td><code>C</code></td><td><code>char</code></td><td>Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16</td></tr><tr><td><code>D</code></td><td><code>double</code></td><td>double-precision floating-point value</td></tr><tr><td><code>F</code></td><td><code>float</code></td><td>single-precision floating-point value</td></tr><tr><td><code>I</code></td><td><code>int</code></td><td>integer</td></tr><tr><td><code>J</code></td><td><code>long</code></td><td>long integer</td></tr><tr><td><code>L</code> <em>ClassName</em> <code>;</code></td><td><code>reference</code></td><td>引用类型，是这个类的一个实例</td></tr><tr><td><code>S</code></td><td><code>short</code></td><td>signed short</td></tr><tr><td><code>Z</code></td><td><code>boolean</code></td><td><code>true</code> or <code>false</code></td></tr><tr><td><code>[</code></td><td><code>reference</code></td><td>数组实例</td></tr></tbody></table><h3 id="方法描述符" tabindex="-1"><a class="header-anchor" href="#方法描述符"><span>方法描述符</span></a></h3><p>方法描述符：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Object m(int i, double d, Thread t) {...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>字节码中是这样的:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IDLjava/lang/Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;)</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Ljava/lang/Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># IDL: 是方法的参数类型，也就是字段描述符对应的含义</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是的二进制名称的内部形式 <code>Thread</code> 和 <code>Object</code> 使用。</p><h2 id="基于栈的架构" tabindex="-1"><a class="header-anchor" href="#基于栈的架构"><span>基于栈的架构</span></a></h2><p>jvm 执行指令是基于栈的架构，还有听到最多的是基于寄存器的架构。</p><p>我们具体关注一下代码信息</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(c);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码对应的指令是下面这个</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // int a = 2 对应下面两个指令操作</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // 含义是：将常量 2 压入栈，然后出栈将值赋给本地变量 2</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">				 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iconst_2		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 常量 2 压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> istore_1		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 出栈保存到本地变量 1 里面</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // int b = 3</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iconst_3		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 常量 3 压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         3</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> istore_2		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 出栈保存到本地变量 2 里面</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // int c = a + b</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         4</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iload_1		  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 本地变量 1 压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         5</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iload_2		  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 本地变量 2 压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         6</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iadd		    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 栈顶两个元素相加，计算结果压栈</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         7</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> istore_3	  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 出栈保存到本地变量 3 里面</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // System.out.println(c);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // 是一个 Fieldref 引用， 引用了常量池中的 #2，获取了一个静态方法</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         8</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> getstatic     #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        11</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> iload_3			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 本地变量 3 压栈，也就是计算结果</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 这里执行了 #3 引用，也就是 println 方法</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        12</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> invokevirtual #</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        15</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用图示表示如下：</p><p>将 2 赋值到本地变量表 1</p><figure><img src="`+t+'" alt="image-20210207174523696" tabindex="0" loading="lazy"><figcaption>image-20210207174523696</figcaption></figure><p>将 3 赋值到本地变量表 2</p><figure><img src="'+h+'" alt="image-20210207174547162" tabindex="0" loading="lazy"><figcaption>image-20210207174547162</figcaption></figure><p>将本地变量表 1、2 压栈</p><figure><img src="'+e+'" alt="image-20210207174628514" tabindex="0" loading="lazy"><figcaption>image-20210207174628514</figcaption></figure><p>计算栈顶两个数值的值，留在栈中的一个元素则是计算后的结果，将该结果出栈，存储在本地变量表 3 中</p><figure><img src="'+k+'" alt="image-20210207174722054" tabindex="0" loading="lazy"><figcaption>image-20210207174722054</figcaption></figure><p>获取了一个静态方法的引用，并将本地变量 3 压栈，形成一个引用和一个参数</p><figure><img src="'+p+'" alt="image-20210207174747794" tabindex="0" loading="lazy"><figcaption>image-20210207174747794</figcaption></figure><p>执行方法，并返回结束该 main 函数</p><figure><img src="'+d+'" alt="image-20210207174830081" tabindex="0" loading="lazy"><figcaption>image-20210207174830081</figcaption></figure><p>以上指令集的含义，请仔细阅读官方文档，这里以 <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.invokevirtual" target="_blank" rel="noopener noreferrer">invokevirtual</a> 来举例，如何看懂这个文档</p><blockquote><h4 id="operation" tabindex="-1"><a class="header-anchor" href="#operation"><span>Operation</span></a></h4><p>Invoke instance method; dispatch based on class</p><p>调用实例方法;基于类的调度</p><h4 id="format" tabindex="-1"><a class="header-anchor" href="#format"><span>Format</span></a></h4><p><em>invokevirtual</em><em>indexbyte1</em><em>indexbyte2</em></p><h4 id="forms" tabindex="-1"><a class="header-anchor" href="#forms"><span>Forms</span></a></h4><p><em>invokevirtual</em> = 182 (0xb6)</p><h4 id="operand-stack-对操作数栈的要求" tabindex="-1"><a class="header-anchor" href="#operand-stack-对操作数栈的要求"><span>Operand Stack / 对操作数栈的要求</span></a></h4><p>..., <em>objectref</em>, [<em>arg1</em>, [<em>arg2</em> ...]] →</p><p>...</p><p>里面需要现有一个 objectref ，对应本例则是 getstatic</p><p>后面需要有该方法的参数，对应本例则是 iload_3</p><p>有了这两个，就可以执行 <em>invokevirtual</em> 指令了</p></blockquote><p>对于官方的英文文档，如果看不懂的话，可以去百度该指令，英文对于指令来说，它的变化是不怎么频繁的</p>',41)]))}const o=s(r,[["render",c],["__file","01.html.vue"]]),v=JSON.parse('{"path":"/monitor-tuning/07/01.html","title":"JVM 字节码指令与 javap","lang":"zh-CN","frontmatter":{"description":"JVM 字节码指令与 javap 下面是一些官方文档地址： JAVA 虚拟机规范 常量池 虚拟机指令集：查阅各个指令的含义 查看一个 class 文件的字节码信息 CLass 文件格式官方文档 再次强调：本节内容知识，要想明白最好通读下官方文档的说明，里面讲得很详细 使用 IDEA 开发的话，直接找到 class 目录（这个要看你用的是什么打包工具），...","head":[["meta",{"property":"og:url","content":"https://www.pvzge.com/blog_technical/monitor-tuning/07/01.html"}],["meta",{"property":"og:title","content":"JVM 字节码指令与 javap"}],["meta",{"property":"og:description","content":"JVM 字节码指令与 javap 下面是一些官方文档地址： JAVA 虚拟机规范 常量池 虚拟机指令集：查阅各个指令的含义 查看一个 class 文件的字节码信息 CLass 文件格式官方文档 再次强调：本节内容知识，要想明白最好通读下官方文档的说明，里面讲得很详细 使用 IDEA 开发的话，直接找到 class 目录（这个要看你用的是什么打包工具），..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-21T11:38:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-21T11:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 字节码指令与 javap\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-21T11:38:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo\\",\\"url\\":\\"https://blog.csdn.net/liao_rh\\"}]}"]]},"headers":[{"level":2,"title":"查看一个 class 文件的字节码信息","slug":"查看一个-class-文件的字节码信息","link":"#查看一个-class-文件的字节码信息","children":[{"level":3,"title":"字段描述符","slug":"字段描述符","link":"#字段描述符","children":[]},{"level":3,"title":"方法描述符","slug":"方法描述符","link":"#方法描述符","children":[]}]},{"level":2,"title":"基于栈的架构","slug":"基于栈的架构","link":"#基于栈的架构","children":[]}],"git":{"createdTime":1734781126000,"updatedTime":1734781126000,"contributors":[{"name":"liao_rh","username":"liao_rh","email":"993929808@qq.com","commits":1,"url":"https://github.com/liao_rh"}]},"readingTime":{"minutes":6.26,"words":1878},"filePathRelative":"monitor-tuning/07/01.md","localizedDate":"2024年12月21日","autoDesc":true}');export{o as comp,v as data};
