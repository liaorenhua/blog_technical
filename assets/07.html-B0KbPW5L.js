import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,l as a,b as n,d as s,e as l,g as t,r as h,o as d}from"./app-DN83cdpr.js";const o="/blog_technical/assets/28237ef93ce0ddca076d2dc19c16fdf9-C_93sR-Z.png",k="/blog_technical/assets/8c1fe47a7ca4b52702a6a14956033f7c-CRYIYnvT.png",g="/blog_technical/assets/52a3bd760584972011f6be1a5258e2d7-Bl28L1F7.png",c="/blog_technical/assets/c5aa6d5f82e8cc1a35772293972446e7-DRKu-2qE.png",y="/blog_technical/assets/image-20210309113745228-5DNnVUvI.png",B="/blog_technical/assets/5a247e9e5bf66f5ac3316fddf4e2b254-CF_5TJ5Z.png",A={};function m(u,i){const e=h("RouteLink");return d(),r("div",null,[i[8]||(i[8]=a('<h1 id="_07-良心中间商-http-的代理服务" tabindex="-1"><a class="header-anchor" href="#_07-良心中间商-http-的代理服务"><span>07 | 良心中间商：HTTP 的代理服务</span></a></h1><p>在前面讲 HTTP 协议的时候，我们严格遵循了 HTTP 的 <strong>请求 - 应答</strong> 模型，协议中只有两个互相通信的角色，分别是 <strong>请求方</strong> 浏览器（客户端）和 <strong>应答方</strong> 服务器。</p><p>今天，我们要在这个模型里引入一个新的角色，那就是 <strong>HTTP 代理</strong> 。</p><p>引入 HTTP 代理后，原来简单的双方通信就变复杂了一些，加入了一个或者多个 <strong>中间人</strong> ，但整体上来看，还是一个有顺序关系的链条，而且链条里相邻的两个角色仍然是简单的一对一通信，不会出现越级的情况。</p><figure><img src="'+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>链条的起点还是客户端（也就是浏览器），中间的角色被称为代理服务器（proxy server），链条的终点被称为源服务器（origin server），意思是数据的「源头」、「起源」。</p><h2 id="代理服务" tabindex="-1"><a class="header-anchor" href="#代理服务"><span>代理服务</span></a></h2><p>代理这个词听起来好像很神秘，有点高大上的感觉。</p><p>但其实 HTTP 协议里对它并没有什么特别的描述，它就是 <strong>在客户端和服务器原本的通信链路中插入的一个中间环节</strong> ，也是一台服务器，但提供的是「代理服务」。</p><p>所谓的代理服务就是指服务本身不生产内容，而是处于中间位置 <strong>转发上下游的请求和响应</strong> ，具有双重身份：面向下游的用户时，表现为服务器，代表源服务器响应客户端的请求；而面向上游的源服务器时，又表现为客户端，代表客户端发送请求。</p><p>还是拿上一讲的生鲜超市来打个比方。</p><p>之前你都是从超市里买东西，现在楼底下新开了一家 24 小时便利店，由超市直接供货，于是你就可以在便利店里买到原本必须去超市才能买到的商品。</p><p>这样超市就不直接和你打交道了，成了源服务器，便利店就成了超市的代理服务器。</p>',13)),n("p",null,[i[1]||(i[1]=s("在 ")),l(e,{to:"/http-protocol/02/04.html#%E4%BB%A3%E7%90%86"},{default:t(()=>i[0]||(i[0]=[s("HTTP 协议概览中-代理")])),_:1}),i[2]||(i[2]=s(" 中，我曾经说过，代理有很多的种类，例如匿名代理、透明代理、正向代理和反向代理。"))]),i[9]||(i[9]=a('<p>今天我主要讲的是实际工作中最常见的 <strong>反向代理</strong> ，它在传输链路中更靠近源服务器，为源服务器提供代理服务。</p><h2 id="代理的作用" tabindex="-1"><a class="header-anchor" href="#代理的作用"><span>代理的作用</span></a></h2><p>为什么要有代理呢？换句话说，代理能干什么、带来什么好处呢？</p><p>你也许听过这样一句至理名言：「计算机科学领域里的任何问题，都可以通过引入一个中间层来解决」（在这句话后面还可以再加上一句「如果一个中间层解决不了问题，那就再加一个中间层」）。TCP/IP 协议栈是这样，而代理也是这样。</p><p>由于代理处在 HTTP 通信过程的中间位置，相应地就对上屏蔽了真实客户端，对下屏蔽了真实服务器，简单的说就是 <strong>欺上瞒下</strong> 。在这个中间层的小天地里就可以做很多的事情，为 HTTP 协议增加更多的灵活性，实现客户端和服务器的双赢 。</p><p>代理最基本的一个功能是 <strong>负载均衡</strong> 。因为在面向客户端时屏蔽了源服务器，客户端看到的只是代理服务器，源服务器究竟有多少台、是哪些 IP 地址都不知道。于是代理服务器就可以掌握请求分发的“大权”，决定由后面的哪台服务器来响应请求。</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>代理中常用的负载均衡算法你应该也有所耳闻吧，比如轮询、一致性哈希等等，这些算法的目标都是尽量把外部的流量合理地分散到多台源服务器，提高系统的整体资源利用率和性能。</p><p>在负载均衡的同时，代理服务还可以执行更多的功能，比如：</p>',9)),n("ul",null,[i[7]||(i[7]=a("<li><strong>健康检查</strong>：使用 <strong>心跳</strong> 等机制监控后端服务器，发现有故障就及时 <strong>踢出</strong> 集群，保证服务高可用；</li><li><strong>安全防护</strong>：保护被代理的后端服务器，限制 IP 地址或流量，抵御网络攻击和过载；</li><li><strong>加密卸载</strong>：对外网使用 SSL/TLS 加密通信认证，而在安全的内网不加密，消除加解密成本；</li><li><strong>数据过滤</strong>：拦截上下行的数据，任意指定策略修改请求或者响应；</li>",4)),n("li",null,[i[4]||(i[4]=n("strong",null,"内容缓存",-1)),i[5]||(i[5]=s("：暂存、复用服务器响应，这个与 ")),l(e,{to:"/http-protocol/04/06.html"},{default:t(()=>i[3]||(i[3]=[s("上一章的 HTTP 的缓存控制")])),_:1}),i[6]||(i[6]=s(" 密切相关，我们稍后再说。"))])]),i[10]||(i[10]=a('<p>接着拿刚才的便利店来举例说明。</p><p>因为便利店和超市之间是专车配送，所以有了便利店，以后你买东西就更省事了，打电话给便利店让它去帮你取货，不用关心超市是否停业休息、是否人满为患，而且总能买到最新鲜的。</p><p>便利店同时也方便了超市，不用额外加大店面就可以增加客源和销量，货物集中装卸也节省了物流成本，由于便利店直接面对客户，所以也可以把恶意骚扰电话挡在外面。</p><h2 id="代理相关头字段" tabindex="-1"><a class="header-anchor" href="#代理相关头字段"><span>代理相关头字段</span></a></h2><p>代理的好处很多，但因为它欺上瞒下的特点，<strong>隐藏了真实客户端和服务器</strong> ，如果双方想要获得这些 <strong>丢失</strong> 的原始信息，该怎么办呢？</p><p>首先，代理服务器需要用字段 <strong>Via</strong> 标明代理的身份。</p><p>Via 是一个通用字段，请求头或响应头里都可以出现。每当报文经过一个代理节点，代理服务器就会把自身的信息追加到字段的末尾，就像是经手人盖了一个章。</p><p>如果通信链路中有很多中间代理，就会在 Via 里形成一个链表，这样就可以知道报文究竟走过了多少个环节才到达了目的地。</p><p>例如下图中有两个代理：proxy1 和 proxy2，客户端发送请求会经过这两个代理，依次添加就是 <code>Via: proxy1, proxy2</code> ，等到服务器返回响应报文的时候就要反过来走，头字段就是 <code>Via: proxy2, proxy1</code> 。</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Via 字段只解决了 <strong>客户端和源服务器判断是否存在代理的问题，还不能知道对方的真实信息</strong> 。</p><p>但服务器的 IP 地址应该是保密的，关系到企业的内网安全，所以一般不会让客户端知道。不过反过来，<strong>通常服务器需要知道客户端的真实 IP 地址，方便做访问控制、用户画像、统计分析</strong> 。</p><p>可惜的是 <strong>HTTP 标准里并没有为此定义头字段</strong> ，但已经出现了很多 <strong>事实上的标准</strong> ，最常用的两个头字段是 <strong>X-Forwarded-For</strong> 和 <strong>X-Real-IP</strong> 。</p><ul><li><p><code>X-Forwarded-For</code>：链式存储</p><p>字面意思是为 <strong>谁而转发</strong> ，形式上和 <code>Via</code> 差不多，也是每经过一个代理节点就会在字段里追加一个信息，但 Via 追加的是代理主机名（或者域名），而 <code>X-Forwarded-For</code> 追加的是请求方的 IP 地址。所以，在字段里最左边的 IP 地址就客户端的地址。</p></li><li><p><code>X-Real-IP</code>：只有客户端 IP 地址</p><p>是另一种获取客户端真实 IP 的手段，它的作用很简单，就是记录客户端 IP 地址，没有中间的代理信息。</p><p>如果客户端和源服务器之间只有一个代理，那么这两个字段的值就是相同的。</p></li></ul><p>我们的实验环境实现了一个反向代理，访问 <code>http://www.chrono.com/21-1</code> ，它会转而访问 <code>http://origin.io</code> 。这里的 <code>origin.io</code> 就是源站，它会在响应报文里输出 <code>Via</code> 、<code>X-Forwarded-For</code> 等代理头字段信息：</p><figure><img src="'+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>后端处理逻辑</p><p><code>http://www.chrono.com/21-1</code> 通过 301 跳转到了 <code>https://www.origin.io/proxy/</code></p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/proxy/&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--ngx.log(ngx.ERR, &quot;exec &quot; .. path)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- redirect to internal /proxy</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ngx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看源码是如何跳转过去的呢？</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" data-title="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    # </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pass</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> to</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> origin</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  /</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/ {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        # </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gzip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vary</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gzip</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gzip_vary</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        internal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        add_header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  Via</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server_port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_set_header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        #</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_http_version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        proxy_set_header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Real</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">IP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          $</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">remote_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">remote_port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        proxy_set_header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Forwarded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">http_host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        proxy_set_header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Forwarded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Proto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scheme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        proxy_set_header</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> X</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Forwarded</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">For</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">proxy_add_x_forwarded_for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        proxy_pass</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">://</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">origin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.io;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码，所有的配置文件都引用了它，也就是说，其实它是转发到了 <code>http://www.chrono.com/proxy</code> 但是这里面配置了是代理到 <code> proxy_pass http://origin.io</code></p><figure><img src="`+y+'" alt="image-20210309113745228" tabindex="0" loading="lazy"><figcaption>image-20210309113745228</figcaption></figure><p>但是这里为什么直接是转发到了 origin ，笔者就不清楚 <code>return ngx.exec(path)</code> 这句代码的含义了，在这里它加了。 但是值的注意的是，后端这里增加了代理头 <code>x-***</code> 的</p><p>单从浏览器的页面上很难看出代理做了哪些工作，因为代理的转发都在后台不可见，所以我把这个过程用 Wireshark 抓了一个包：</p><figure><img src="'+B+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从抓包里就可以清晰地看出代理与客户端、源服务器的通信过程：</p><ol><li>客户端 55061 先用三次握手连接到代理的 80 端口，然后发送 GET 请求；</li><li>代理不直接生产内容，所以就代表客户端，用 55063 端口连接到源服务器，也是三次握手；</li><li>代理成功连接源服务器后，发出了一个 HTTP/1.0 的 GET 请求；</li><li>因为 HTTP/1.0 默认是短连接，所以源服务器发送响应报文后立即用四次挥手关闭连接；</li><li>代理拿到响应报文后再发回给客户端，完成了一次代理服务。</li></ol><p>在这个实验中，你可以看到除了 <code>X-Forwarded-For</code> 和 <code>X-Real-IP</code> ，还出现了两个字段：<code>X-Forwarded-Host</code> 和 <code>X-Forwarded-Proto</code> ，它们的作用与 <code>X-Real-IP</code> 类似，只记录客户端的信息，分别是客户端请求的原始域名和原始协议名。</p><h2 id="代理协议" tabindex="-1"><a class="header-anchor" href="#代理协议"><span>代理协议</span></a></h2><p>有了 <code>X-Forwarded-For</code> 等头字段，源服务器就可以拿到准确的客户端信息了。但对于代理服务器来说它并不是一个最佳的解决方案。</p><p>因为通过 <code>X-Forwarded-For</code> 操作代理信息 <strong>必须要解析 HTTP 报文头</strong> ，这对于代理来说成本比较高，原本只需要简单地转发消息就好，而现在却必须要费力解析数据再修改数据，<strong>会降低代理的转发性能</strong> 。</p><p>另一个问题是 <code>X-Forwarded-For</code> 等头 <strong>必须要修改原始报文</strong> ，而有些情况下是不允许甚至不可能的（比如使用 <strong>HTTPS 通信被加密</strong> ）。</p><p>所以就出现了一个专门的 <strong>代理协议 （The PROXY protocol）</strong> ，它由知名的代理软件 HAProxy 所定义，也是一个 <strong>事实标准</strong> ，被广泛采用（注意并不是 RFC）。</p><p>代理协议有 v1 和 v2 两个版本，v1 和 HTTP 差不多，也是明文，而 v2 是二进制格式。今天只介绍比较好理解的 v1，它在 HTTP 报文前增加了一行 ASCII 码文本，相当于又多了一个头。</p><p>这一行文本其实非常简单，开头必须是 <code>PROXY</code> 五个大写字母，然后是 <code>TCP4</code> 或者 <code>TCP6</code> ，表示客户端的 IP 地址类型，再后面是请求方地址、应答方地址、请求方端口号、应答方端口号，最后用一个回车换行（\\r\\n）结束。</p><p>例如下面的这个例子，在 GET 请求行前多出了 PROXY 信息行，客户端的真实 IP 地址是 <code>1.1.1.1</code> ，端口号是 55555。</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PROXY TCP4 1.1.1.1 2.2.2.2 55555 80\\r\\n</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\r\\n</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.xxx.com\\r\\n</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\r\\n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器看到这样的报文，只要解析第一行就可以拿到客户端地址，不需要再去理会后面的 HTTP 数据，省了很多事情。</p><p>不过代理协议并不支持 <code>X-Forwarded-For</code> 的链式地址形式，所以拿到客户端地址后再如何处理就需要代理服务器与后端自行约定。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><ol><li>HTTP 代理就是客户端和服务器通信链路中的一个中间环节，为两端提供 <strong>代理服务</strong> ；</li><li>代理处于中间层，为 HTTP 处理增加了更多的灵活性，可以实现负载均衡、安全防护、数据过滤等功能；</li><li>代理服务器需要使用字段 <code>Via</code> 标记自己的身份，多个代理会形成一个列表；</li><li>如果想要知道客户端的真实 IP 地址，可以使用字段 <code>X-Forwarded-For</code> 和 <code>X-Real-IP</code> ；</li><li>专门的 <strong>代理协议</strong> 可以在不改动原始报文的情况下传递客户端的真实 IP。</li></ol><h2 id="课下作业" tabindex="-1"><a class="header-anchor" href="#课下作业"><span>课下作业</span></a></h2><ol><li><p>你觉得代理有什么缺点？实际应用时如何避免？</p><p>代理的缺点是增加链路长度，会增加响应耗时，应尽量减少在代理商所做的的一些与业务无关的复杂耗时操作。</p></li><li><p>你知道多少反向代理中使用的负载均衡算法？它们有什么优缺点？</p><ul><li><p>随机</p></li><li><p>轮询</p></li><li><p>哈希</p></li><li><p>最近最少使用</p></li><li><p>链接最少</p></li></ul></li></ol><h2 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h2><ul><li><p>现实生活中也有很多代理，例如房产代理、留学代理、保险代理、诉讼代理、可以对比理解下</p></li><li><p>知名的代理软件有 HAProxy、Squid、Varnish 等，而 Nginx 虽然是 Web 服务器，但也可以作为代理服务器，而且功能毫不逊色</p></li><li><p><code>Via</code> 是 HTTP 协议里规定的标准头字段，但有的服务器返回的响应报文里会使用 <code>X-Via</code> 含义是相同的</p></li><li><p>因为 HTTP 是明文传输，请求头是很容易被篡改，所以 <code>X-Forwarded-For</code> 也不是完全可信</p></li><li><p>RFC7239定义了字段 <code>Forwarded</code>，它可以代替 <code>X-Forwarded-For</code>、<code>X-Forwarded-Host</code> 等字段，但应用得不多</p></li><li><p>如何检测匿名代理？</p><p>如果代理比较善良，修改了字段 <code>X-Forwarded-For</code> 和 <code>X-Real-IP</code>，我们还能看到，如果它不携带这些字段，我们也没有办法，因为它就是一个真实的客户端</p></li></ul>`,46))])}const v=p(A,[["render",m],["__file","07.html.vue"]]),T=JSON.parse('{"path":"/http-protocol/04/07.html","title":"07 | 良心中间商：HTTP 的代理服务","lang":"zh-CN","frontmatter":{"description":"07 | 良心中间商：HTTP 的代理服务 在前面讲 HTTP 协议的时候，我们严格遵循了 HTTP 的 请求 - 应答 模型，协议中只有两个互相通信的角色，分别是 请求方 浏览器（客户端）和 应答方 服务器。 今天，我们要在这个模型里引入一个新的角色，那就是 HTTP 代理 。 引入 HTTP 代理后，原来简单的双方通信就变复杂了一些，加入了一个或者...","head":[["meta",{"property":"og:url","content":"https://www.pvzge.com/blog_technical/http-protocol/04/07.html"}],["meta",{"property":"og:title","content":"07 | 良心中间商：HTTP 的代理服务"}],["meta",{"property":"og:description","content":"07 | 良心中间商：HTTP 的代理服务 在前面讲 HTTP 协议的时候，我们严格遵循了 HTTP 的 请求 - 应答 模型，协议中只有两个互相通信的角色，分别是 请求方 浏览器（客户端）和 应答方 服务器。 今天，我们要在这个模型里引入一个新的角色，那就是 HTTP 代理 。 引入 HTTP 代理后，原来简单的双方通信就变复杂了一些，加入了一个或者..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-21T11:38:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-21T11:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07 | 良心中间商：HTTP 的代理服务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-21T11:38:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LMYY\\",\\"url\\":\\"https://gaozih.com\\"}]}"]]},"headers":[{"level":2,"title":"代理服务","slug":"代理服务","link":"#代理服务","children":[]},{"level":2,"title":"代理的作用","slug":"代理的作用","link":"#代理的作用","children":[]},{"level":2,"title":"代理相关头字段","slug":"代理相关头字段","link":"#代理相关头字段","children":[]},{"level":2,"title":"代理协议","slug":"代理协议","link":"#代理协议","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"课下作业","slug":"课下作业","link":"#课下作业","children":[]},{"level":2,"title":"拓展阅读","slug":"拓展阅读","link":"#拓展阅读","children":[]}],"git":{"createdTime":1734781126000,"updatedTime":1734781126000,"contributors":[{"name":"liao_rh","username":"liao_rh","email":"993929808@qq.com","commits":1,"url":"https://github.com/liao_rh"}]},"readingTime":{"minutes":11.93,"words":3578},"filePathRelative":"http-protocol/04/07.md","localizedDate":"2024年12月21日","autoDesc":true}');export{v as comp,T as data};
