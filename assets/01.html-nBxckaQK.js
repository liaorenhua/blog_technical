import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,i as e,o as n}from"./app-wuj0w1aR.js";const l="/blog_technical/assets/image-20210128185758372-DLAQkEA7.png",t="/blog_technical/assets/image-20210128193827100-C8j5cwTG.png",h={};function p(k,i){return n(),a("div",null,i[0]||(i[0]=[e('<h1 id="jvm-内存结构-基于-jdk-1-8" tabindex="-1"><a class="header-anchor" href="#jvm-内存结构-基于-jdk-1-8"><span>JVM 内存结构：基于 JDK 1.8</span></a></h1><blockquote><p><a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener noreferrer">Java SE 规范所有版本官方地址</a>，包括语言规范和虚拟机规范</p></blockquote><h2 id="运行时数据区" tabindex="-1"><a class="header-anchor" href="#运行时数据区"><span>运行时数据区</span></a></h2><blockquote><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5" target="_blank" rel="noopener noreferrer">JDK 8 官方运行时数据区文档</a></p></blockquote><figure><img src="'+l+'" alt="image-20210128185758372" tabindex="0" loading="lazy"><figcaption>image-20210128185758372</figcaption></figure><p>Java 虚拟机定义了在程序执行期间使用的各种运行时数据区域。其中一些数据区域是在 Java 虚拟机启动时创建的，仅在 Java 虚拟机退出时才被销毁。其他数据区域是每个线程的。在创建线程时创建每个线程的数据区域，在线程退出时销毁每个数据区域。</p><h3 id="程序计数器-pc-register" tabindex="-1"><a class="header-anchor" href="#程序计数器-pc-register"><span>程序计数器 / Pc Register</span></a></h3><p>Java 虚拟机可以一次支持多个执行线程（JLS§17）。每个 Java 虚拟机线程都有其自己的 <code>Pc Register</code>（程序计数器）。在任何时候，每个 Java 虚拟机线程都在执行单个方法的代码，即该线程的当前方法：</p><ul><li>如果不是 <code>native</code>，则该 <code>Pc Register</code> 包含当前正在执行的 Java 虚拟机指令的地址。</li><li>如果线程当前正在执行的方法是 <code>native</code>，则 Java 虚拟机的 <code>Pc Register</code> 值未定义。</li></ul><h3 id="虚拟机栈-java-virtual-machine-stacks" tabindex="-1"><a class="header-anchor" href="#虚拟机栈-java-virtual-machine-stacks"><span>虚拟机栈 / Java Virtual Machine Stacks</span></a></h3><p>每个 Java 虚拟机线程都有一个私有 <em>Java 虚拟机堆栈</em> ，与该线程同时创建。Java 虚拟机堆栈类似于 C 之类的常规语言的堆栈：它保存局部变量和部分结果，并在方法调用和返回中起作用。因为除了入栈和出栈外，从不直接操纵 Java 虚拟机堆栈，所以可以为堆分配帧。Java 虚拟机堆栈的内存不必是连续的。</p><p>在第一版 <em>中的 Java ®虚拟机规范</em> ，Java 虚拟机堆被称为 <em>Java堆栈</em> 。</p><p>该规范允许 Java 虚拟机堆栈具有固定大小，或根据计算要求动态扩展和收缩。如果 Java 虚拟机堆栈的大小固定，则在创建每个 Java 虚拟机堆栈时可以独立选择它们的大小。</p><p>Java 虚拟机实现可以为程序员或用户提供对 Java 虚拟机堆栈的初始大小的控制，并且在动态扩展或收缩 Java 虚拟机堆栈的情况下，可以控制最大和最小大小。</p><p>以下异常条件与 Java 虚拟机堆栈相关：</p><ul><li>如果线程中的计算所需的 Java 虚拟机堆栈超出允许的范围，则 Java 虚拟机将抛出 <code>StackOverflowError</code>。</li><li>如果可以动态扩展 Java 虚拟机堆栈，并尝试进行扩展，但是可以提供足够的内存来实现扩展，或者如果没有足够的内存来为新线程创建初始 Java 虚拟机堆栈，则可以使用 Java 虚拟机机器抛出一个 <code>OutOfMemoryError</code>。</li></ul><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h4><p><strong>Java 虚拟机栈</strong> 是线程私有的，它的生命周期与线程相同。它描述的是 Java 方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><h3 id="堆-heap" tabindex="-1"><a class="header-anchor" href="#堆-heap"><span>堆 / Heap</span></a></h3><p>Java 虚拟机具有一个在所有 Java 虚拟机线程之间共享的 <strong>堆</strong> 。堆是运行时数据区，<strong>从中分配所有类实例和数组的内存</strong>。</p><p>堆是在虚拟机启动时创建的。对象的堆存储由自动存储管理系统（称为 <em>垃圾收集器</em> ）<em>回收</em>；对象永远不会显式释放。Java 虚拟机不假定特定类型的自动存储管理系统，并且可以根据实现者的系统要求选择存储管理技术。堆的大小可以是固定的，也可以根据计算要求进行扩展，如果不需要更大的堆，则可以将其收缩。堆的内存不必是连续的。</p><p>Java 虚拟机实现可以为程序员或用户提供对堆初始大小的控制，并且，如果可以动态扩展或收缩堆，则可以控制最大和最小堆大小。</p><p>以下异常情况与堆相关联：</p><ul><li>如果计算需要的堆多于自动存储管理系统可以提供的堆，则 Java 虚拟机将抛出一个 <code>OutOfMemoryError</code>。</li></ul><h4 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1"><span>小结</span></a></h4><p>Java 堆是 Java 虚拟机所管理的内存中最大的一块。堆是被所有线程共享的一块内存区域，在虚拟机启动时创建，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p><p>Java 堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。</p><h3 id="方法区-method-area" tabindex="-1"><a class="header-anchor" href="#方法区-method-area"><span>方法区 / Method Area</span></a></h3><p>Java 虚拟机具有一个在所有 Java 虚拟机线程之间共享的 <strong>方法区域</strong>。该方法区域类似于常规语言的编译代码的存储区域，或者类似于操作系统过程中的 「文本」段。<strong>它存储每个类的结构</strong> ，例如运行时常量池，字段和方法数据，以及方法和构造函数的代码，包括用于类和实例初始化以及接口初始化的特殊方法。</p><p>方法区域是在 <strong>虚拟机启动时创建的</strong>。尽管方法区域在逻辑上是堆的一部分，但是简单的实现可以选择不进行垃圾回收或压缩。该规范没有规定方法区域的位置或用于管理已编译代码的策略。方法区域可以是固定大小的，或者可以根据计算的需要进行扩展，如果不需要更大的方法区域，则可以缩小。方法区域的内存不必是连续的。</p><p>Java 虚拟机实现可以为程序员或用户提供对方法区域初始大小的控制，并且在方法大小可变的情况下，可以控制最大和最小方法区域大小。</p><p>以下异常条件与方法区域相关联：</p><ul><li>如果无法提供方法区域中的内存来满足分配请求，则 Java 虚拟机将抛出一个 <code>OutOfMemoryError</code>。</li></ul><h4 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2"><span>小结</span></a></h4><p>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器后的代码等数据。</p><p>虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 <code>Non-Heap</code> （非堆），目的是与 Java 堆区分开来。</p><h3 id="运行时常量池-run-time-constant-pool" tabindex="-1"><a class="header-anchor" href="#运行时常量池-run-time-constant-pool"><span>运行时常量池 / Run-Time Constant Pool</span></a></h3><p><strong>运行时间常量池</strong> 是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p>以下异常条件与类或接口的运行时常量池的构造有关：</p><ul><li>创建类或接口时，如果运行时常量池的构造需要的内存超过 Java 虚拟机的方法区域中可用的内存，则Java虚拟机将抛出 <code>OutOfMemoryError</code> 。</li></ul><h3 id="本地方法堆栈-native-method-stacks" tabindex="-1"><a class="header-anchor" href="#本地方法堆栈-native-method-stacks"><span>本地方法堆栈 / Native Method Stacks</span></a></h3><p>Java 虚拟机的实现可以使用传统的堆栈（俗称 「C 堆栈」）来支持 <code>native</code> 方法（以 Java 编程语言以外的语言编写的方法）。解释程序的实现也可以使用诸如 C 之类的语言来解释 Java 虚拟机的指令集，以使用 <code>native</code> 本机方法栈。无法加载方法并且自身不依赖于常规堆栈的 Java 虚拟机实现无需提供本机方法栈。如果提供，通常在创建每个线程时为每个线程分配本机方法堆栈。</p><p>该规范允许本机方法堆栈具有固定大小，或者根据计算需要动态扩展和收缩。如果本机方法堆栈的大小固定，则在创建每个本机方法堆栈的大小时可以独立选择。</p><p>Java 虚拟机实现可以为程序员或用户提供对本机方法堆栈的初始大小的控制，并且在本机方法堆栈大小变化的情况下，可以控制最大和最小方法堆栈大小。</p><p>以下异常条件与本机方法堆栈相关联：</p><ul><li>如果线程中的计算所需的本机方法堆栈超出允许的范围，则 Java 虚拟机将抛出 <code>StackOverflowError</code>。</li><li>如果可以动态扩展本机方法堆栈并尝试进行本机方法堆栈扩展，但可以提供足够的内存，或者可以提供足够的内存来为新线程创建初始本机方法堆栈，则 Java 虚拟机将抛出 <code>OutOfMemoryError</code>。</li></ul><h4 id="小节" tabindex="-1"><a class="header-anchor" href="#小节"><span>小节</span></a></h4><p>本地方法堆栈与虚拟机栈所发挥的作用是非常相似，他们之间的区别不过是虚拟机栈为虚拟机执行 Java 方法（字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</p><h2 id="jvm-的内存结构" tabindex="-1"><a class="header-anchor" href="#jvm-的内存结构"><span>JVM 的内存结构</span></a></h2><figure><img src="'+t+`" alt="image-20210128193827100" tabindex="0" loading="lazy"><figcaption>image-20210128193827100</figcaption></figure><h3 id="非堆区" tabindex="-1"><a class="header-anchor" href="#非堆区"><span>非堆区</span></a></h3><ul><li><p>Metaspace</p><p>Class、Package、Method、Field、字节码、常量池、符号引用等</p></li><li><p>CSS：32 位指针的 Class</p></li><li><p>CodeCache：JIT 编译后的本地代码、JNI 使用的 C 代码</p></li></ul><p>比如说：可以在 Tomcat 的 <code>bin/catalina.sh</code> 中配置如下参数：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 大概在 269 行，第一次非注释出现的地方</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">JAVA_OPTS</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$JAVA_OPTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -Xms128M -Xmx128M -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=128M -XX:+UseCompressedClassPointers&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 TOMCAT 后，查看他的 JC 信息</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mrcode@mrcode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> %</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">417</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">867</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2135</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">30776</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> org.apache.catalina.startup.Bootstrap</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">30781</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sun.tools.jps.Jps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mrcode@mrcode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> %</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jstat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -gc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30776</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> S0C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S1C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S0U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S1U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      EC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       EU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        OC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         OU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       MC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     MU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    CCSC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   CCSU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   YGC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     YGCT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    FGC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    FGCT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     GCT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9728.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9216.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2861.8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   24576.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  15416.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   87552.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    35399.4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   41472.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 40137.4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5120.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4781.9</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     22</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0.119</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      0.000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0.119</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 CCSC 是 5120 KB，那么我们将它禁用掉</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 改成 - ：-XX:-UseCompressedClassPointers</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">JAVA_OPTS</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$JAVA_OPTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -Xms128M -Xmx128M -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=128M -XX:-UseCompressedClassPointers&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启后查看</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mrcode@mrcode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> %</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">417</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">30834</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sun.tools.jps.Jps</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">867</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2135</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">30825</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> org.apache.catalina.startup.Bootstrap</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mrcode@mrcode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> %</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jstat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -gc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30825</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> S0C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S1C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S0U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    S1U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      EC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       EU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        OC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         OU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       MC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     MU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    CCSC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   CCSU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   YGC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     YGCT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    FGC</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    FGCT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     GCT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">8704.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9216.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   2161.4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 24576.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   9539.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   87552.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    36188.3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   39680.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 38174.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       23</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0.116</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      0.000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0.116</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CCSC 和 CCSU 都变成 0 了</p><h2 id="常用参数" tabindex="-1"><a class="header-anchor" href="#常用参数"><span>常用参数</span></a></h2><ul><li><code>-Xms -Xmx</code> ：堆内存大小</li><li><code>-XX:NewSize -XX:MaxNewSize</code>：新生代，young 区</li><li><code>-XX:NewRatio </code> ：新生代 和 old 区的一个比例</li><li><code>-XX:MaxSurvivorRatio</code> ：Eden 区和 Survivor 区的比例</li><li><code>-XX:MetaspaceSize -XX:MaxMetaspaceSize</code> ：Metaspace 大小</li><li><code>-XX:UseCompressedClassPointers</code>：是否启用压缩的类指针</li><li><code>-XX:CompressedClassSpaceSize</code>：设置类压缩占用空间</li><li><code>-XX:InitialCodeCacheSize</code>：CodeCache 初始大小</li><li><code>-XX:ReservedCodeCacheSize</code>：CodeCache 最大大小</li></ul><p>Metaspace 后面的这几个一般都不需要调整，只需要调整 MetaspaceSize 大小，因为他们都是包含在 MetaspaceSize 中的</p>`,64)]))}const o=s(h,[["render",p],["__file","01.html.vue"]]),c=JSON.parse('{"path":"/monitor-tuning/06/01.html","title":"JVM 内存结构：基于 JDK 1.8","lang":"zh-CN","frontmatter":{"description":"JVM 内存结构：基于 JDK 1.8 Java SE 规范所有版本官方地址，包括语言规范和虚拟机规范 运行时数据区 JDK 8 官方运行时数据区文档 image-20210128185758372image-20210128185758372 Java 虚拟机定义了在程序执行期间使用的各种运行时数据区域。其中一些数据区域是在 Java 虚拟机启动时创...","head":[["meta",{"property":"og:url","content":"https://www.pvzge.com/blog_technical/monitor-tuning/06/01.html"}],["meta",{"property":"og:title","content":"JVM 内存结构：基于 JDK 1.8"}],["meta",{"property":"og:description","content":"JVM 内存结构：基于 JDK 1.8 Java SE 规范所有版本官方地址，包括语言规范和虚拟机规范 运行时数据区 JDK 8 官方运行时数据区文档 image-20210128185758372image-20210128185758372 Java 虚拟机定义了在程序执行期间使用的各种运行时数据区域。其中一些数据区域是在 Java 虚拟机启动时创..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-21T11:38:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-21T11:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 内存结构：基于 JDK 1.8\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-21T11:38:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo\\",\\"url\\":\\"https://blog.csdn.net/liao_rh\\"}]}"]]},"headers":[{"level":2,"title":"运行时数据区","slug":"运行时数据区","link":"#运行时数据区","children":[{"level":3,"title":"程序计数器 /  Pc  Register","slug":"程序计数器-pc-register","link":"#程序计数器-pc-register","children":[]},{"level":3,"title":"虚拟机栈 / Java Virtual Machine Stacks","slug":"虚拟机栈-java-virtual-machine-stacks","link":"#虚拟机栈-java-virtual-machine-stacks","children":[]},{"level":3,"title":"堆 / Heap","slug":"堆-heap","link":"#堆-heap","children":[]},{"level":3,"title":"方法区 / Method Area","slug":"方法区-method-area","link":"#方法区-method-area","children":[]},{"level":3,"title":"运行时常量池 / Run-Time Constant Pool","slug":"运行时常量池-run-time-constant-pool","link":"#运行时常量池-run-time-constant-pool","children":[]},{"level":3,"title":"本地方法堆栈 / Native Method Stacks","slug":"本地方法堆栈-native-method-stacks","link":"#本地方法堆栈-native-method-stacks","children":[]}]},{"level":2,"title":"JVM 的内存结构","slug":"jvm-的内存结构","link":"#jvm-的内存结构","children":[{"level":3,"title":"非堆区","slug":"非堆区","link":"#非堆区","children":[]}]},{"level":2,"title":"常用参数","slug":"常用参数","link":"#常用参数","children":[]}],"git":{"createdTime":1734781126000,"updatedTime":1734781126000,"contributors":[{"name":"liao_rh","username":"liao_rh","email":"993929808@qq.com","commits":1,"url":"https://github.com/liao_rh"}]},"readingTime":{"minutes":9.09,"words":2728},"filePathRelative":"monitor-tuning/06/01.md","localizedDate":"2024年12月21日","autoDesc":true}');export{o as comp,c as data};
