import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,i as a,o as l}from"./app-DOYXvAgo.js";const s="/blog_technical/assets/image-20210207150551614-DSgmAKE6.png",n="/blog_technical/assets/image-20210207150813253-D-_M-IZp.png",r="/blog_technical/assets/image-20210207151320765-C6Tb6O0Q.png",d={};function c(p,t){return l(),i("div",null,t[0]||(t[0]=[a(`<h1 id="tomcat-的-gc-调优实战" tabindex="-1"><a class="header-anchor" href="#tomcat-的-gc-调优实战"><span>Tomcat 的 GC 调优实战</span></a></h1><h2 id="gc-调优步骤" tabindex="-1"><a class="header-anchor" href="#gc-调优步骤"><span>GC 调优步骤</span></a></h2><ol><li>打印 GC 日志</li><li>根据日志得到关键性能指标</li><li>分析 GC 原因，调优 JVM 参数</li></ol><h2 id="初始设置" tabindex="-1"><a class="header-anchor" href="#初始设置"><span>初始设置</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 禁用声明式 GC 语法，在程序只中显示的调用 System.gc，禁用这个，不然可能会影响 GC 的表现</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+DisableExplicitGC</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 当堆溢出的时候，记录快照</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+HeapDumpOnOutofMemoryError</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:HeapDumpPath</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$CATALINA</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HOME/logs/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印 GC 日志</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintGCDetails</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintGCTimeStamps</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+PrintGCDateStamps</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xloggc:$SCATALINA_HOME/logs/gc.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parallel-gc-调优的指导原则" tabindex="-1"><a class="header-anchor" href="#parallel-gc-调优的指导原则"><span>Parallel GC 调优的指导原则</span></a></h2><ul><li>除非确定，否则不要设置最大堆内存</li><li>优先设置吞吐量目标</li><li>如果吞吐量目标达不到，调大最大内存，不能让 OS 使用 Swap，如果仍然达不到，降低目标</li><li>吞吐量能达到，GC 时间太长，设置停顿时间的目标</li></ul><figure><img src="`+s+'" alt="image-20210207150551614" tabindex="0" loading="lazy"><figcaption>image-20210207150551614</figcaption></figure><p>下面记录下初始参数下的性能指标</p><table><thead><tr><th style="text-align:center;">吞吐量 <br> Throughput</th><th style="text-align:center;">最小停顿时间<br>Min Pause</th><th style="text-align:center;">最大停顿时间<br>Max Pause</th><th>平均停顿时间<br> Avg Pause</th><th>YGC 总次数<br> Number of gc pauses</th><th>FullGC 总次数<br>Number of full gc pauses</th></tr></thead><tbody><tr><td style="text-align:center;">96.19%</td><td style="text-align:center;">0.00625s</td><td style="text-align:center;">0.03446s</td><td>0.01464s</td><td>5</td><td>1</td></tr></tbody></table><p>从上图可以看到由于 Metadata 区导致了一次 YGC 和 一次 FullGC，我们尝试调大 Metadata 区的大小。</p><figure><img src="'+n+'" alt="image-20210207150813253" tabindex="0" loading="lazy"><figcaption>image-20210207150813253</figcaption></figure><p>从上图所知， Perm heap 其实就是 Metadata 区（该软件的一些含义可以在他的官方文档上查看），这里只占用了 20.1 M，我们尝试调大它的空间</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-XX:MetaspaceSize=64M</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>调整为 64M 后，再次查看他的 GC 日志</p><figure><img src="'+r+'" alt="image-20210207151320765" tabindex="0" loading="lazy"><figcaption>image-20210207151320765</figcaption></figure><table><thead><tr><th style="text-align:center;">吞吐量 <br> Throughput</th><th style="text-align:center;">最小停顿时间<br>Min Pause</th><th style="text-align:center;">最大停顿时间<br>Max Pause</th><th>平均停顿时间<br> Avg Pause</th><th>YGC 总次数<br> Number of gc pauses</th><th>FullGC 总次数<br>Number of full gc pauses</th><th></th></tr></thead><tbody><tr><td style="text-align:center;">96.19%</td><td style="text-align:center;">0.00625s</td><td style="text-align:center;">0.03446s</td><td>0.01464s</td><td>5</td><td>1</td><td>调整前</td></tr><tr><td style="text-align:center;">96.83%</td><td style="text-align:center;">0.01132s</td><td style="text-align:center;">0.02419s</td><td>0.01812s</td><td>4</td><td>0</td><td>调整后</td></tr></tbody></table><p>从结果来看，整体是变好了，Metadata 区的两次 YGC 和 FullGC 没有了</p><p>后面的参数就不一一尝试了，总结下：</p><ul><li><p>设置 Metaspace 大小</p><p><code>-XX:MetaspaceSize=64M -XX:MaxMetaspaceSize=64M</code></p></li><li><p>添加吞吐量和停顿时间参数</p><p><code>-XX:GCTimeRatio=99 -XX:MaxGCPauseMillis=100</code></p><p>不一定调整之后性能会变高，所以需要去尝试调整，然后查看日志的分析反馈</p></li><li><p>修改动态扩容增量</p><p><code>-XX:YoungGenerationSizeIncrement=30</code> 默认值是 20%，这里增加 10%</p><p>由于发现产生了 4 次的 YGC，增加 Young 区大小，应该可以消除</p></li></ul><h2 id="g1-gc-最佳实践" tabindex="-1"><a class="header-anchor" href="#g1-gc-最佳实践"><span>G1 GC 最佳实践</span></a></h2><ul><li><p>年轻代大小：</p><p>避免使用 <code>-Xmn</code>、<code>-XX:NewRatio</code> 等显示设置 Young 区大小，会覆盖暂停时间目标</p></li><li><p>暂停时间目标：</p><p>暂停时间不要太严苛，其吞吐量目标是 90% 的应用程序时间和 10% 的垃圾回收时间，太严苛会直接影响到吞吐量</p></li></ul><p>MixGC 调优：</p><ul><li><code>-XX:InitiatingHeapOccupancyPercent</code></li><li><code>-XX:G1MixedGCLiveThresholdPercent</code>、<code>-XX:G1HeapWastePercent</code></li><li><code>-XX:G1MixedGCCountTarget</code></li><li><code>-XX:G1OldCSetRegionThresholdPercent</code></li></ul><p>这些在垃圾器一章节有讲解过，这里还是针对那章节的知识点，进行实战。</p><p>GC 调优就是根据日志的反馈，去针对的改变可能的参数，增加它的相关性能指标</p><div class="hint-container tip"><p class="hint-container-title">重要的事情</p><p>这里的调整思路，包括参数含义，在官方文档里面都有写，这里入个门，详细的去对应的学；</p><p>官方文档总共只有十几章，想要学习这一块一定要去官方文档去看看。</p></div>',27)]))}const g=e(d,[["render",c],["__file","05.html.vue"]]),m=JSON.parse('{"path":"/monitor-tuning/06/05.html","title":"Tomcat 的 GC 调优实战","lang":"zh-CN","frontmatter":{"description":"Tomcat 的 GC 调优实战 GC 调优步骤 打印 GC 日志 根据日志得到关键性能指标 分析 GC 原因，调优 JVM 参数 初始设置 Parallel GC 调优的指导原则 除非确定，否则不要设置最大堆内存 优先设置吞吐量目标 如果吞吐量目标达不到，调大最大内存，不能让 OS 使用 Swap，如果仍然达不到，降低目标 吞吐量能达到，GC 时间太...","head":[["meta",{"property":"og:url","content":"https://www.pvzge.com/blog_technical/monitor-tuning/06/05.html"}],["meta",{"property":"og:title","content":"Tomcat 的 GC 调优实战"}],["meta",{"property":"og:description","content":"Tomcat 的 GC 调优实战 GC 调优步骤 打印 GC 日志 根据日志得到关键性能指标 分析 GC 原因，调优 JVM 参数 初始设置 Parallel GC 调优的指导原则 除非确定，否则不要设置最大堆内存 优先设置吞吐量目标 如果吞吐量目标达不到，调大最大内存，不能让 OS 使用 Swap，如果仍然达不到，降低目标 吞吐量能达到，GC 时间太..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-21T11:38:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-21T11:38:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tomcat 的 GC 调优实战\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-21T11:38:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leo\\",\\"url\\":\\"https://blog.csdn.net/liao_rh\\"}]}"]]},"headers":[{"level":2,"title":"GC 调优步骤","slug":"gc-调优步骤","link":"#gc-调优步骤","children":[]},{"level":2,"title":"初始设置","slug":"初始设置","link":"#初始设置","children":[]},{"level":2,"title":"Parallel GC 调优的指导原则","slug":"parallel-gc-调优的指导原则","link":"#parallel-gc-调优的指导原则","children":[]},{"level":2,"title":"G1 GC 最佳实践","slug":"g1-gc-最佳实践","link":"#g1-gc-最佳实践","children":[]}],"git":{"createdTime":1734781126000,"updatedTime":1734781126000,"contributors":[{"name":"liao_rh","username":"liao_rh","email":"993929808@qq.com","commits":1,"url":"https://github.com/liao_rh"}]},"readingTime":{"minutes":2.76,"words":829},"filePathRelative":"monitor-tuning/06/05.md","localizedDate":"2024年12月21日","autoDesc":true}');export{g as comp,m as data};
